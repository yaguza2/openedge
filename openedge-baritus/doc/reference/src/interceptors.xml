<chapter id="interceptors">

    <title>Interceptors</title>
 
	<para>
		The subject of this chapter, Interceptors, allow you to override/ extend the default behaviour
		of Baritus.
	</para>
	
    <sect1 id="interceptors-s1">
        <title>Interception</title>

        <para>
            Interceptors provide a means to encapsulate cross-cutting code that is executed on 
			pre-defined points in the line of execution. Interceptors are classes that implement
			one or more interfaces from the package 'nl.openedge.baritus.interceptors'.
        </para>

		<para>
			 Interceptors can be used to decorate the normal execution. Also, by throwing FlowExceptions, interceptors can
			 alter the flow of execution. An interceptor can throw a FlowException if it wants Baritus to stop
			 normal processing and go to the given declared view (using ReturnNowFlowException) such as 'error', 
			 or dispatch to an arbitrary - non declared - URL (using DispatchNowFlowException) location.
		</para>
		
	</sect1>
	
    <sect1 id="interceptors-s2">
        <title>Interceptors</title>

        <para>
			The following interceptors are available.
        </para>
		
			<itemizedlist spacing="compact">

				<listitem>
	                <para>
						<literal>BeforeMakeFormBeanInterceptor</literal>.
						Registered instances will have their command method executed before the
						method makeFormBean is called.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>BeforePopulationInterceptor</literal>.
						 Registered instances will have their command method executed before
						 population and validation is done.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>PopulationErrorInterceptor</literal>.
						 Registered instances will have their command method executed if 
						 the model failed to populate, or did not pass validation.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>AfterPopulationInterceptor</literal>.
						 Registered instances will have their command method executed before the
						 normal action execution took place, but after the form bean was populated.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>PerformExceptionInterceptor</literal>.
						 Registered instances will have their command method executed if 
						 an unhandeld exception occured while executing the perform method.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>AfterPerformInterceptor</literal>.
						 Registered instances will have their command method executed after the
						 normal action execution took place. That means that makeFormBean was called,
						 the form was populated and - if that population was succesfull - the 
						 command method was called prior to this execution.
	                </para>
					<para>
						You cannot be sure that the form was populated successfully. Therefore
						it's dangerous and generally bad practice to rely on form properties that are 
						populated from the http request. A good usage example: a lot of views need
						data to fill their dropdown lists etc. In this method, you could load that data and
						save it in the form (or as a request attribute if that's your style). As this method
						is allways executed, you have a guaranteed data delivery to your view, regardless
						the normal execution outcome of the control. 
					</para>
	            </listitem>

			</itemizedlist>

	</sect1>
	
    <sect1 id="interceptors-s2">
        <title>Throwing FlowExceptions</title>

        <para>
			An interceptor can alter the line of execution by thowing a FlowException. An example of when to do this is:
			if you expect a session variable to be set, but there is none, you might want to redirect to a search page or
			an error page. Another example: on certain non handled exceptions that are thrown in the perform
			method, you might want to redirect to a specific error page that is different from the error page that is
			shown when population errors occured.
        </para>
		
		<para>
			There are two types of FlowExceptions that can be thrown by interceptors.
		</para>
		
			<itemizedlist spacing="compact">

				<listitem>
	                <para>
						<literal>ReturnNowFlowException</literal>.
						The property 'view' in this exception is used to return to Maverick as the view to display.
						In effect, this view must correspond to a declared view (like 'error' or 'detail') in your Maverick configuration.
	                </para>
	            </listitem>
				<listitem>
	                <para>
						<literal>DispatchNowFlowException</literal>.
						 The property 'dispatchPath' is used to dispatch to directly (like 'errors/critical.jsp', 'mymacro.vm' or
						 'http://www.myserver.com/support'.
	                </para>
	            </listitem>

			</itemizedlist>
			
		<para>
			Finally, with FlowException property 'executeOtherInterceptors' you can set on the exception that indicates 
			whether (some of the) other interceptors should be executed. 
			FlowExceptions thrown by these interceptors are ignored.
		</para>

	</sect1>
	
    <sect1 id="interceptors-s3">
        <title>And example</title>
        
        <para>
            Here is an example of how to use interceptors.
            In part of our imaginary application, we want to be sure that an object
            was saved in the session, and after we checked it is, we want to
            set that object as one of our form bean properties. If our object is not found
            however, we want to cancel the normal Baritus behaviour and do a redirect
            (or actually dispatch) to another location right away. Because we set
            that object in the form bean just before population takes place 
            (but after the makeFormBean method was called), it can be populated by 
            the request paremeters etc. as well.
        </para>
        
        <para>
            First, there is our Interceptor. 
        </para>
        <programlisting><![CDATA[
public class LoadFooFromSessionInterceptor implements BeforePopulationInterceptor {

    /**
     * Before population takes place, we get our Foo object from the session, check
     * it's actually there (is not null) and set it in our form, so that it can be
     * populated as well.
     */
    public void doBeforePopulation(
        ControllerContext cctx, FormBeanContext formBeanContext)
        throws ServletException, DispatchNowFlowException, ReturnNowFlowException 
    {
        HttpServletRequest request = cctx.getRequest();
        HttpSession session = request.getSession();
        Foo ourFoo = (Foo) session.getAttribute(Constants.SESSION_KEY_FOO_OBJECT);

        if (ourFoo == null) 
        { // ourFoo does not exist in the session... redirect to 'home.m'
            throw new DispatchNowFlowException("home.m");
        } 
        else 
        { //  we're ok, set in form and exit method normally
            FooBarForm form = (FooBarForm) formBeanContext.getBean();
            form.setFoo(ourFoo);
        }
    }
}
]]></programlisting>

        <para>
            Then, we should register the interceptor in the controllers we want to use it.  
        </para>

        <programlisting><![CDATA[
    public void init(Element controllerNode) throws ConfigException 
    {
        addInterceptor(new LoadFooFromSessionInterceptor());
    }
]]></programlisting>

        <para>
            Baritus will now call this interceptor each time this control is
            used right after calling makeFormBean and just before population and
            validation takes place.
        </para>
	</sect1>
	
    <sect1 id="interceptors-s4">
        <title>Stacking interceptors</title>
        
        <para>
            Just like you can do with validators, you can stack interceptors as well.
        </para>
        
        <programlisting><![CDATA[
    public void init(Element controllerNode) throws ConfigException 
    {
        addInterceptor(new FooInterceptor());
        addInterceptor(new BarInterceptor());
        addInterceptor(new MooInterceptor());
    }
]]></programlisting>
        
        <para>
            In the above example, all interceptors can be of the same type(s), and
            will be called in order of registration. Thus, FooInterceptor is called
            first, BarInterceptor after that and MooInterceptor is called last.
        </para>
        
    </sect1>
</chapter>

