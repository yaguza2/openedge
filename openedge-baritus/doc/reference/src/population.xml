<chapter id="population">

    <title>Population</title>
    
	<para>
		This chapter explains the population process.
	</para>
	
	<sect1 id="population-s1">
        <title>Population process</title>
		
	    <para>
			When building web applications with Java, one of the commons things you want to
			do is to translate user input, i.e. request parameters, into server side objects, like
			objects of your domain model. Population is the process of matching request parameters
			(and optionally configuration parameters, session attributes and request attributes) with
			properties of the form bean, converting the request parameters to the target property
			type and setting the converted values on the form bean.
	    </para>
		
	    <para>
			By default, <a href="http://www.ognl.org">Ognl</a> is used to get and set properties.
			It is possible to use a custom populator delegate instead of the default delegate
			'nl.openedge.baritus.population.OgnlFieldPopulator'. See chapter six for the details,
			and <a href="BeanUtilsFieldPopulator.java.txt">this BeanUtils populator</a> as
			an example.
	    </para>
	
	    <mediaobject>
	        <imageobject role="fo">
	            <imagedata fileref="images/population.gif" format="GIF" align="center"/>
	        </imageobject>
	        <imageobject role="html">
	            <imagedata fileref="../images/population.gif" format="GIF" align="center"/>
	        </imageobject>
	    </mediaobject>
		
	</sect1>
	
	<sect1 id="population-s2">
		<title>Conversion</title>
		
		<para>
			One of the tasks to be done when populating a java bean from an HTTP request is the
			conversion of string parameters to Java types (Integers, Dates, etc.). 
			<literal>Converters</literal> are used for this purpose. <literal>Converters</literal>
			are globally registered with the <literal>ConverterRegistry</literal>.
		</para>
		
		<para>
			There are two types of converters, normal converters and locale-sensitive converters.
			Locale-sensitive converters override normal converters that are registered for the same type.
			Thus, if both a normal and a locale-sensitive converter are registered for type 
			<literal>java.util.Date</literal>, the locale-sensitive converter will be used.
		</para>
		
		<para>
			Allthough the ConverterRegistry has sensible defaults, you can register other Converters like this:
		</para>
		
        <programlisting><![CDATA[
ConverterRegistry reg = ConverterRegistry.getInstance();
reg.register(new FallbackDateConverter(), Date.class);
reg.register(new FallbackDateConverter(), java.sql.Date.class);
reg.register(new FallbackDateConverter(), Timestamp.class);
]]></programlisting>
		
		<para>
			Converters must implement either <literal>org.apache.commons.beanutils.Converter</literal>
			or <literal>org.apache.commons.beanutils.locale.LocaleConverter</literal>.
		</para>
		
		<para>
			ConverterRegistry is a global registry. Hence, registered converters (and formatters) are
			shared amongst all controllers.
		</para>
		
	</sect1>
	
	<sect1 id="population-s3">
		<title>Formatting</title>
		
		<para>
			Besides converting string values to Java types, you often want to format values. Two mechanisms
			are available for formatting.
		
	        <itemizedlist spacing="compact">
	            <listitem>
	                <para>
						Using converters. Converters that implement interface
						<literal>nl.openedge.baritus.converters.Formatter</literal> are used automatically
						for formatting values of the type that the converter was registered for.
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   Other formatters. Formatters (that implement interface 
					   <literal>nl.openedge.baritus.converters.Formatter</literal>) can registered on name.
					   For example:
					   
		<programlisting><![CDATA[
public class InverseFormatter implements Formatter
{
	/** reverse input */
	public String format(Object object, String pattern)
	{
		String formatted = null;
		if(object != null)
		{
			StringBuffer b = new StringBuffer(String.valueOf(object));
			formatted = b.reverse();
		}
		return formatted;
	}
}
]]></programlisting>
					
		</para>
		<para>
					   
		<programlisting><![CDATA[
...
ConverterRegistry reg = ConverterRegistry.getInstance();
reg.register(new InverseFormatter(), "*REVERSE");
...
]]></programlisting>
					   
		<programlisting><![CDATA[
#set( $myString = "toBeReversed" )
$!{model.format($myString, "*REVERSE")}
]]></programlisting>

		</para>
		<para>

			or, if the form bean has property 'myProperty':

		<programlisting><![CDATA[
$!{model.displayProperty("myProperty", "*REVERSE")}
]]></programlisting>
			
						Note that displayProperty not only looks up the property value, and checks if there is
						an override value registered for that property, but also tries to format the value 
						using one of the registered formatters.
					</para>
	            </listitem>
	        </itemizedlist>
		
		</para>
		
		<para>
			The algoritm to find a formatter is: 
			first see if there's a formatter registered on fieldName (e.g. 'myProperty').
			If not found, see if there's a formatter registered with the provided pattern (e.g. '*REVERSE).
			If not found, see if the converter that is registered for the property type and
			(the optional) locale, implements Formatter. If so, use the converter for formatting. 
			If not found, just convert to a plain string (using ConvertUtils).
		</para>
		
	</sect1>

	<sect1 id="population-s4">
		<title>Custom population</title>

		<para>
			The population process can be customized to suit your requirements. By default, class
			<literal>nl.openedge.baritus.population.DefaultFieldPopulator</literal> is used
			for population. <literal>DefaultFieldPopulator</literal> uses introspection to set
			the properties. You can however, create custom populators by creating implementations
			of <literal>nl.openedge.baritus.population.FieldPopulator</literal>.
			<literal>nl.openedge.baritus.population.AbstractFieldPopulator</literal> can be used
			as a base class.
			
			You can register custom populators in two ways:
			
	        <itemizedlist spacing="compact">
	            <listitem>
	                <para>
						Register the populator with a field name like:
		<programlisting><![CDATA[
addPopulator("myProperty",  new MySpecialPopulator());
]]></programlisting>
		
		</para>
		<para>

						E.g. with:
						
		<programlisting><![CDATA[
<form action="${request.contextType}/mycmd.m">
	<input type="text" name="myProperty" value="">
	<input type="text" name="someOtherProperty" value="">
	<input type="submit" value="submit">
</form>
]]></programlisting>
						
		</para>
		<para>
						
	                In the above example, <literal>MySpecialPopulator</literal> will be used to handle 
					request parameter 'myProperty', and <literal>DefaultFieldPopulator</literal> 
					will be used to handle 'someOtherProperty'.
					</para>
					
	            </listitem>
	            <listitem>
	                <para>
						Register the populator with a regexp like:
		<programlisting><![CDATA[
// block property by regex pattern
addPopulator(Pattern.compile("(.)*ByRegex$"), new IgnoreFieldPopulator()); 
]]></programlisting>	                

		</para>
		<para>

						E.g. with:

		<programlisting><![CDATA[
<form action="${request.contextType}/mycmd.m">
	<input type="text" name="myPropertyByRegex" value="">
	<input type="text" name="anotherPropertyByRegex" value="">
	<input type="text" name="someOtherProperty" value="">
	<input type="submit" value="submit">
</form>
]]></programlisting>
						
		</para>
		<para>
						
	                In this example, <literal>IgnoreFieldPopulator</literal> will be used to handle 
					request parameters 'myPropertyByRegex' and 'anotherPropertyByRegex', and 
					<literal>DefaultFieldPopulator</literal> will be used to handle 'someOtherProperty'.
					
					<literal>IgnoreFieldPopulator</literal> is actually shipped with Baritus as it has a common
					use. When working with pojo that come for instance from your domain model, you potentially
					introduce a security hazard. A common case is that clients should never be able to
					change id's directly from the request. Using <literal>IgnoreFieldPopulator</literal>
					you can, for instance, block all request parameters that end with '.id'.
				  </para>

				</listitem>
	        </itemizedlist>
			
		</para>
		
		<para>
				Custom populators are registered with a controller. Hence, registering a custom
				populator for controller A does not have effect on the population for controller B.
		</para>
		
	</sect1>
	
</chapter>

