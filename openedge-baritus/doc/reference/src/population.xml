<chapter id="population">

    <title>Population</title>
    
	<sect1 id="population-s1">
        <title>Population process</title>
		
	    <para>
			When building web applications with Java, one of the most commons things you want to
			do is to translate user input, i.e. request parameters, into server side objects, like
			objects from your domain model. Population is the process of matching request parameters
			(and optionally configuration parameters, session attributes and request attributes) with
			properties of the form bean, converting the request parameters to the target property
			type and setting the converted values on the form bean.
	    </para>
	
	    <mediaobject>
	        <imageobject role="fo">
	            <imagedata fileref="images/population.gif" format="GIF" align="center"/>
	        </imageobject>
	        <imageobject role="html">
	            <imagedata fileref="../images/population.gif" format="GIF" align="center"/>
	        </imageobject>
	    </mediaobject>
		
	</sect1>
	
	<sect1 id="population-s2">
		<title>Conversion</title>
		
		<para>
			One of the central tasks to be done when populating a java bean from an HTTP request is the
			conversion of string parameters to Java types (Integers, Dates, etc.). 
			<literal>Converters</literal> are used for this purpose. <literal>Converters</literal>
			are globally registered with the <literal>ConverterRegistry</literal>.
		</para>
		
		<para>
			There are two types of converters, normal converters and locale-sensitive converters.
			Locale-sensitive converters override normal converters that are registered for the same type.
			Thus, if both a normal and a locale-sensitive converter are registered for type 
			<literal>java.util.Date</literal>, the locale-sensitive converter will be used.
		</para>
		
		<para>
			Allthough the ConverterRegistry has sensible defaults, you can register other Converters like this:
		</para>
		
        <programlisting><![CDATA[
		ConverterRegistry reg = ConverterRegistry.getInstance();
		reg.register(new FallbackDateConverter(), Date.class);
		reg.register(new FallbackDateConverter(), java.sql.Date.class);
		reg.register(new FallbackDateConverter(), Timestamp.class);
]]></programlisting>
		
		<para>
			Converters must implement either <literal>org.apache.commons.beanutils.Converter</literal>
			or <literal>org.apache.commons.beanutils.locale.LocaleConverter</literal>.
		</para>
		
	</sect1>
	
	<sect1 id="population-s3">
		<title>Formatting</title>
		
		<para>
			Besides converting string values to Java types, you often want to format values. Two mechanisms
			are available for formatting.
		
	        <itemizedlist spacing="compact">
	            <listitem>
	                <para>
						Using converters. Converters that implement interface
						<literal>nl.openedge.baritus.converters.Formatter</literal> are used automatically
						for formatting values of the type that the converter was registered for.
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   Other formatters (that also implement interface 
					   <literal>nl.openedge.baritus.converters.Formatter</literal>) can registered on name.
					   For example:
					   

			
						Note that displayProperty not only looks up the property value, and checks if there is
						an override value registered for that property, but also tries to format the value 
						using one of the registered formatters.
	                </para>
	            </listitem>
	        </itemizedlist>
		
		</para>
		
		<para>
			To find a formatter: first see if there's a formatter registered on fieldName (e.g. 'myProperty').
			If not found, see if there's a formatter registered with the provided pattern (e.g. '*REVERSE).
			If not found, see if the converter that is registered for the property type and
			(the optional) locale, implements Formatter. If so, use the converter for formatting. 
			If not found, just convert to a plain string (using ConvertUtils).
		</para>
		
	</sect1>

</chapter>

