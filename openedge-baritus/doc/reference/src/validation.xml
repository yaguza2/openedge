<chapter id="validation">

    <title>Validation</title>
    
	<para>
		This chapter explains validation.
	</para>
	
	<sect1 id="validation-s1">
        <title>After population</title>
		
	    <para>
			The first pass in the population process is the conversion of request parameters etc. to
			Java objects and populating the provided form bean with those objects.
			If this is successful, you know that inputs for integers, dates, etc. conform to a
			valid form (e.g. 'foo' is not a valid integer, but '12' is).
	    </para>
		
		<para>
			Next, you might want to check if, for instance, a provided parameter not only is a
			valid integer, but is also greater than say 10. Or that a parameter not only is
			a valid date, but that this date also is after today. If we talk about validation, we mean
			this kind of checks.
		</para>
		
		<para>
			Validation can be performed on two levels: field and form level. Field level validation is related to 
			one input field (e.g. a request parameter) at a time. 
			Form level validation is executed regardles the provided parameters.
		</para>

		<para>
			Furthermore, whether a validation action is executed can be made dependend of a certain
			state (like the value a parameter) using 
			<literal>nl.openedge.baritus.validation.ValidationActivationRule</literal>s.
		</para>
		
	</sect1>
	
	<sect1 id="validation-s2">
		<title>An example</title>
		
		<para>
			Let us start with an example that displays some usages of the validation mechanism
			of Baritus. In the following example, we want to validate that not only myInteger is
			a valid integer, but also that the integer allways has a value that is greater than ten.
		
		<programlisting><![CDATA[
public class FooForm
{
	private Integer myInteger;
	
	public Integer getMyInteger() { return myInteger; }
	public void setMyInteger(Integer i) { myInteger = i; }
}
]]></programlisting>
			
		</para>
		<para>
			
			The validator:
			
		<programlisting><![CDATA[
public class BarValidator extends AbstractFieldValidator
{
	public boolean isValid(
		ControllerContext cctx, 
		FormBeanContext formBeanContext, 
		String fieldName, 
		Object value)
	{
		// note that type conversion is allready done by the population process
		Integer val = (Integer)value; 
		// the value can still be null though
		boolean valid = (val != null && val.intValue() > 10); 
		
		if(!valid)
		{
			String errorMessage = "input " + value + 
				" is not valid; please provide a number larger than 10";
			formBeanContext.setError(fieldName, errorMessage);
		}
		
		return valid;
	}

}
]]></programlisting>

		</para>
		<para>
			
			Now, register it with your control:
			
		<programlisting><![CDATA[
public class MyCtrl extends FormBeanCtrl
{
	...
	
	public void init(Element controllerNode) throws ConfigException
	{
		addValidator("myInteger", new BarValidator());
		...
	}
	
	...
}
]]></programlisting>

		</para>
		<para>
			
			And a crude example of how you can use it with a velocity template:
			
		<programlisting><![CDATA[
<input type="text" name="myInteger"
	#if( $model.errors.get('myInteger') ) class="fielderror" #else class="field" #end
	value="$!{model.displayProperty('myInteger')}">

<br>
#if( $model.errors.get('myInteger')  )  
	<span class="error"> ${model.errors.get('myInteger') } </span>
#end
]]></programlisting>
						
		</para>
		
	</sect1>
	
	<sect1 id="validation-s3">
        <title>Mapped and indexed properties</title>
		
	    <para>
			When using mapped or indexed properties, you have two options of registering field validators,
			on target name and/ or on flat name. Let's illustratie this by example:
			
		<programlisting><![CDATA[
public class FormWithMap
{
	private Map foo = new HashMap();
	
	public Integer getfoo() { return foo; }
	public void setfoo(Map m) { foo = m; }
}
]]></programlisting>

		</para>
		<para>

			Not only can we register validators with the whole target name, including the keys
			or indexes like this:

		<programlisting><![CDATA[
...
	addValidator("foo['bar']", myValidator);
	addValidator("foo['someOtherKey']", myOtherValidator);
...
]]></programlisting>

		</para>
		<para>

			But in case the validator should be executed for all keys (or indexes), the 'flat name'
			(name without markup for map/ index navigation) as well like:

		<programlisting><![CDATA[
...
	addValidator("foo", myValidatorForAllKeys);
...
]]></programlisting>
			
	    </para>
		
	</sect1>

	<sect1 id="validation-s4">
		<title>ValidationActivationRules</title>		
		
		<para>
			Whether validators are actually used a given situation can be directed through the use of
			ValidationActivationRules (<literal>nl.openedge.baritus.validation.ValidationActivationRule</literal>).
		</para>
		
		<para>
			For example:
		</para>
		
		<programlisting><![CDATA[
public class MyValidationRule implements ValidationActivationRule
{
	public boolean allowValidation(
		ControllerContext cctx,
		FormBeanContext formBeanContext)
	{
		return "true".equals(cctx.getRequest().getParameter("validate"));
	}
}
]]></programlisting>
		
		<programlisting><![CDATA[
FieldValidator validator = new RequiredFieldValidator();
validator.setValidationRule(new MyValidationRule());
addValidator("myField", validator);
]]></programlisting>
		
		<para>
			In the above example the validator will only be called when request parameter 'validate' is
			provided and has value 'true'.
		</para>
		
		<para>
			You can register only one validation activation rule with a validator at a time. 
			It is not difficult though, to stack validator activation rules, for example by using 
			<literal>nl.openedge.baritus.validation.impl.NestedValidationActivationRule</literal>.
		</para>
		
	</sect1>
	
	<sect1 id="validation-s5">
        <title>Validator implementations</title>

		<para>
			Package <literal>nl.openedge.baritus.validation.impl</literal> is reserved for implementations
			of Validators.
			
			<itemizedlist spacing="compact">
	            <listitem>
	                <para>
						<literal>MaximumFieldLengthValidator</literal>.
							This validator checks on maximum length. If the type of the value is a String,
							the string length is checked. If the type of the value is a Number, the actual
							number is used. E.g. if property maxLength is 4, "hello" will fail, but "hi" 
							will pass, and number 5 will fail, but 2 will pass.
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   <literal>MinimumFieldLengthValidator</literal>.
							This validator checks on minimum length. If the type of the value is a String,
							the string length is checked. If the type of the value is a Number, the actual
							number is used. E.g. if property maxLength is 4, "hello" will pass, but "hi" 
							will fail, and number 5 will pass, but 2 will fail.
					</para>
	            </listitem>
	            <listitem>
	                <para>
	                   <literal>PropertyNotNullFormValidator</literal>.
							Checks whether the form contains a non null property with the name of property 
							propertyName.
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   <literal>RegexValidator</literal>.
							Tests for a match against a regex pattern.
							if property 'mode' is MODE_VALID_IF_MATCHES (which is the default), isValid returns
							true if the input matches the pattern. If property mode is MODE_INVALID_IF_MATCHES
							(i.e. else), isValid returns false if the input matches the pattern.
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   <literal>RequiredFieldValidator</literal>.
						Checks for a non-EMPTY input.
						Use this for fields that should have a not null (empty string) input.
						Note that as this validator is a field validator, and thus is registered
						for a single field, it is only fired if a field (e.g. a request parameter)
						is actually provided. In other words: if an instance of a required field
						validator was registered for field name 'myprop', but 'myprop' is not part
						of the request parameters, this validator never fires. Hence, if you want
						to be REALLY sure that a property of the form is not null, use a form validator
						(PropertyNotNullValidator). RequiredFieldValidator works fine for most cases
						where you have a HTML form with a field that should have a non empty value, but
						that - if a user fools around - does not seriousely break anything when a value
						is not provided (e.g. you probably have not null constraint in you database as well).
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                   <literal>RequiredSessionAttributeValidator</literal>.
						Checks whether a session attribute exists with the key
						that was set for property sessionAttributeKey.
	                </para>
	            </listitem>

			</itemizedlist>
			
		</para>

	</sect1>
</chapter>

