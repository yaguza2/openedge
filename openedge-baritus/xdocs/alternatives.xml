<?xml version="1.0"?>
<document>

	<properties>
		<title>OpenEdge Baritus</title>
		<author email="eelco.hillenius@openedge.nl">Eelco Hillenius</author>
	</properties>

	<body>

		<section name="Alternatives">
			<p>
				If you are looking for a Java web application framework, but Baritus is just not your piece of cake,
				take a look at the following projects.
				<ul>
					<li>
						<a href="http://mav.sourceforge.net/">Maverick</a>
						If you think Baritus does not add much to the original minimalist framework, you could
						give Maverick a try. It works great and is easy to extend.
					</li>
					<li>
						<a href="http://jakarta.apache.org/struts/">Struts</a>
						The leading and first to popularize web MVC framework. Struts has a huge user base, lots of
						documentation and extensions and your manager has probably heard of it.
					</li>
					<li>
						<a href="http://www.opensymphony.com/webwork/">WebWork</a>
						Number two in popularity, webWork 2 uses the generic command pattern framework XWork
						and is based on a concept they call Pull HMVC.
					</li>
					<li>
						<a href="http://jakarta.apache.org/tapestry/index.html">Tapestry</a>
						A very elegant framework that has a component focus instead of a page focus (which, in the
						end all MVC frameworks have).
					</li>
					<li>
						<a href="http://www.springframework.org/">Spring Framework</a>
						A relatively new kid on the block, Spring Framework has a strong business focus, and is
						very flexible in the kind of techniques you want to combine it with.
					</li>
					<li>
						<a href="http://barracudamvc.org/Barracuda/index.html">Barracuda</a>
						Though it looks quite complicated to me, it also looks like a very sophisticated
						framework. If I ever have spare time, this would be one of the first frameworks
						to check out. Take a look at their very informative framework analysis
						<a href="http://barracudamvc.org/Barracuda/docs/barracuda_vs_struts.html">here</a>.
						For some of the problems they see with Struts, that they solve with an event mechanism,
						could be adressed in Baritus using interceptors. Component based approaches
						have the potential of being much more suitable for large projects than the
						'tradional' model 2 approaches (just like Baritus is). One major problem though
						remains the stateless http model that underlies all webapplications.
					</li>
				</ul>
			</p>
			<p>
				So, with all those frameworks (there's more than is listed here) out there, why on earth did we start
				another framework? Imho, there's nothing wrong about re-inventing the wheel often, as long as
				you look at the existing ones, and try to make it better. Every mature project suffers from a large
				user base in the sense that it becomes harder and harder to implement API changes and refactor the
				whole thing. Also, by then the creators usually have scratched their itch enough, and become less
				willing to push forward.
			</p>
			<p>
				Drop us a line if you think another framework should be listed here as well.
			</p>
		</section>

	</body>
</document>
