<?xml version="1.0"?>
<document>

	<properties>
		<title>OpenEdge Baritus</title>
		<author email="eelco.hillenius@openedge.nl">Eelco Hillenius</author>
	</properties>

	<body>

		<section name="Alternatives">
			<p>
				If you are looking for a Java web application framework, but Baritus is just not your piece of cake,
				take a look at the following projects.
				<ul>
					<li>
						<a href="http://mav.sourceforge.net/">Maverick</a>
						. If you think this project does not add much to the original minimalist framework, you could
						give it a try. It works great and is easy to extend.
					</li>
					<li>
						<a href="http://jakarta.apache.org/struts/">Struts</a>
						. The leading and first to popularize web MVC framework. Struts has a huge user base, lots of
						documentation and extensions and your manager has probably heard of it.
					</li>
					<li>
						<a href="http://www.opensymphony.com/webwork/">WebWork</a>
						. Probably number two in popularity. WebWork 2 uses the generic command pattern framework XWork
						and is based on a concept called Pull HMVC.
					</li>
					<li>
						<a href="http://jakarta.apache.org/tapestry/index.html">Tapestry</a>
						. A very elegant framework that has a component focus instead of a page focus (which, in the
						end all MVC frameworks have).
					</li>
					<li>
						<a href="http://www.springframework.org/">Spring Framework</a>
						. Another relatively new kid on the block, Spring Framework has a strong business focus, and is
						very flexible in the kind of techniques you want to combine it with.
					</li>
				</ul>
			</p>
			<p>
				So, with all those frameworks (there's more than is listed here) out there, why on earth did I start
				another framework. In my opinion, there's nothing wrong about re-inventing the wheel often, as long as
				you look at the existing ones, and try to make it better. Every mature project suffers from a large
				user base in the sense that it becomes harder and harder to implement API changes and refactor the
				whole thing. Also, by then the creators usually have scratched their itch enough, and become less
				willing to push forward.
			</p>
		</section>

	</body>
</document>
