<?xml version="1.0" encoding="iso-8859-1" ?>

<!-- ================================================== -->
<!-- BUILDFILE FOR CHIBA - an webbased xforms processor

     call ant with the target as, e.g.

        ant -find build.xml compile


     the main targets are:

     compile-all
        compiles all core and extension classes

     deploy
        creates the correct deployment directory structure in build.dir and
        copies all web (html, jsp, images) and configuration (web.xml)
        related data there.

     javadoc
        creates the javadocumentation for the java classes into doc.dir/api

     distribute
        creates two distribution files app.name-app.version-src.jar and
        app.name-app.version.jar, a source distribution (identical to the
        source directory) and a binary distribution (identical to the
        deploy.dir directory).  the two files are created in dist.dir

     junit
        runs the included junit tests.


     And if everything has become dirty and filthy and crap use:

     clean
        this target removes all compiled java classes from the build.dir,
        but does not touch the rest (jsp, html, xml, stylesheets)

     clean-all
        this target removes all - and this means really all!  If you've
        changed files, like jsp, stylesheets etc. they are simply removed!
        so using this target means you know what you are doing

     kill-all
        as clean-all but also deletes your webapps directory in the home
        of your webcontainer

    schema2XForms
        this target generates an XForm from an W3C XMLSchema document.
        A number of parameters need to be specified in order for it to work
        (parameters are passed with -DparameterName=parameterValue):

        - schema2XForms.xform: name of the xform to generate: there must be a
        directory with this name under the "xforms" directory, and the schema
        in this directory must be called with this name followed by .xsd

        - schema2XForms.rootTagName: the "root" element name of the XML instance
        corresponding to this schema
        schema2XForms.instanceFile and schema2XForms.instanceHref: the instance
        XML document can be specified either as a file, in which case it will be
        included in the generated XForms, or as a URI, in which case a "href" link
        will be set on the "instance" element of the generated XForms

        - schema2XForms.action: this parameter will be set in the "action"
        attribute of the "submission" element in the generated XForms document

        - schema2XForms.submitMethod: this parameter will be set in the "method"
        attribute of the "submission" element in the generated XForms document

        - schema2XForms.wrapperType: specify the kind of wrapper elements that will
        be generated in the XForms document.
        Default will generate default, platform independant elements, while
        "HTML" wrapperType will generate an XHTML document

        - schema2XForms.stylesheet: name of the transformation stylesheet to use.
        If none is specified, the default HTML stylesheet is used.
	
	- schema2XForms.useSchemaTypes: use types given in the XMLSchema whenever possible
	for simple types (the XMLSchema will need to be accessible from the XForms)
  -->

<project name="Chiba" default="distribute" basedir=".">


    <!-- the setting for TOMCAT_HOME in your environment will be used to locate your tomcat
         installation. If you like to use a different one, set the value of the property 'webapps.dir'
         to the absolute path on your disk. -->
    <property environment="env"/>
    <property name="webapps.dir" value="${env.TOMCAT_HOME}/webapps"/>
    <!--    <property name="webapps.dir" value="/Applications/jakarta-tomcat-4.1.30/webapps"/>-->
    <!--<property name="webapps.dir" value="./webapps" /> -->

    <property name="app.name" value="chiba"/>
    <property name="app.version" value="0.9.9"/>

    <!--Host address and port for sample files base url-->
    <property name="tokens.file" value="./tokens.properties"/>

    <!-- directory variables -->
    <property name="deploy.dir" value="${webapps.dir}/${app.name}-${app.version}"/>
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="lib"/>
    <property name="extension.lib.dir" value="lib/extension"/>
    <property name="doc.dir" value="doc"/>
    <property name="etc.dir" value="etc"/>
    <property name="web.dir" value="web"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="dist"/>
    <property name="javadoc.dir" value="${doc.dir}/api"/>
    <property name="test.dir" value="test"/>

    <!-- the following properties are questionable - should be removed if not needed -->
    <property name="documents.dir" value="documents"/>
    <property name="forms.dir" value="forms"/>

    <property name="excludes" value="excludes.properties"/>


    <!-- ==================================================-->
    <!-- properties used by the schema2XForms generator
        (target=schema2Xforms) -->
    <!-- ================================================== -->
    <!-- schema2XForms.xform: name of the xform to generate: there must be a directory with this name
    under the "xforms" directory, and the schema in this directory must be called
    with this name followed by .xsd -->
    <property name="schema2XForms.xform" value="buglet"/>
    <!-- schema2XForms.rootTagName: the "root" element name of the XML instance
    corresponding to this schema -->
    <property name="schema2XForms.rootTagName" value="basicSchemaTest"/>
    <!-- schema2XForms.instanceFile and schema2XForms.instanceHref: the instance
    XML document can be specified either as a file, in which case it will be
    included in the generated XForms, or as a URI, in which case a "href" link
    will be set on the "instance" element of the generated XForms-->
    <property name="schema2XForms.instanceFile" value=""/>
    <property name="schema2XForms.instanceHref" value=""/>
    <!-- schema2XForms.action: this parameter will be set in the "action" attribute
    of the "submission" element in the generated XForms document -->
    <property name="schema2XForms.action" value=""/>
    <!-- schema2XForms.submitMethod: this parameter will be set in the "method"
    attribute of the "submission" element in the generated XForms document -->
    <property name="schema2XForms.submitMethod" value=""/>
    <!-- schema2XForms.wrapperType: specify the kind of wrapper elements that will
    be generated in the XForms document.
    Default will generate an XHTML document that works with Chiba -->
    <property name="schema2XForms.wrapperType" value="HTML"/>
    <!--schema2XForms.stylesheet: name of the transformation stylesheet to use.
    If none is specified, the default HTML stylesheet is used.-->
    <property name="schema2XForms.stylesheet" value=""/>
    <!--schema2XForms.base: the xml:base attribute of the generated XForms,
    for example http://localhost:8080/chiba-0.9.3/
    it is only needed if the "action" or the "instanceHref" parameters are relative
    -->
    <property name="schema2XForms.base" value=""/>
    <!-- schema2XForms.useSchemaTypes: use types given in the XMLSchema whenever possible
	for simple types (the XMLSchema will need to be accessible from the XForms)-->
    <property name="schema2XForms.useSchemaTypes" value="true"/>

    <property name="schema2XForms.generated.dir" value="generated"/>
    <property name="schema2XForms.xforms.dir" value="xforms"/>

    <!-- ================================================== -->
    <!--     classpathes                                    -->
    <!-- ================================================== -->
    <path id="compile.class.path" description="classpath for compiling core classes">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement path="${build.dir}/WEB-INF/classes"/>
    </path>

    <path id="compile.all.class.path" description="classpath for compiling core plus all extension classes">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <pathelement path="${build.dir}/WEB-INF/classes"/>
    </path>

    <!-- todo: really needed ?   -->
    <path id="jar.compile.class.path">
        <pathelement path="${build.dir}/WEB-INF/classes"/>
        <pathelement path="${lib.dir}/bsf.jar"/>
        <pathelement path="${lib.dir}/commons-codec-1.2.jar"/>
        <pathelement path="${lib.dir}/commons-fileupload-1.0.jar"/>
        <pathelement path="${lib.dir}/commons-httpclient-2.0.1.jar"/>
        <pathelement path="${lib.dir}/commons-jxpath-1.2.jar"/>
        <pathelement path="${lib.dir}/commons-logging.jar"/>
        <pathelement path="${lib.dir}/dom3-xercesImpl.jar"/>
        <pathelement path="${lib.dir}/dom3-xml-apis.jar"/>
        <pathelement path="${lib.dir}/log4j-1.2.8.jar"/>
        <pathelement path="${lib.dir}/mail.jar"/>
        <pathelement path="${lib.dir}/activation.jar"/>
        <pathelement path="${lib.dir}/servlet.jar"/>
    </path>

    <path id="run.class.path">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <pathelement path="${build.dir}/WEB-INF/classes"/>
    </path>

    <!-- ====================================================================== -->
    <!--    setup                                                               -->
    <!-- ====================================================================== -->
    <target name="prepare" depends="publish">
        <echo message=""/>
        <echo message="---------- preparing: creating dirs and copying files ----------"/>
        <echo message=""/>

        <tstamp/>
        <filter filtersfile="${tokens.file}"/>

        <condition property="VM">
            <contains string="${java.version}" substring="1.4"/>
        </condition>

        <echo message="JDK1.4: ${VM}"/>
        <echo message="current JDK: ${java.version}"/>

        <mkdir dir="${javadoc.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/WEB-INF"/>
        <mkdir dir="${build.dir}/WEB-INF/classes"/>
        <mkdir dir="${build.dir}/WEB-INF/xslt"/>
        <mkdir dir="${build.dir}/upload"/>

        <!--
        copy all xml files in the correct dirs. These include
        configuration- and test-files which are located in the
        java src-package structure.
        -->
        <delete file="${build.dir}/WEB-INF/classes/org/chiba/xml/xforms/version.info"/>
        <copy description="copy resources to package tree" todir="${build.dir}/WEB-INF/classes" filtering="true" includeemptydirs="false">
            <fileset dir="${src.dir}" excludes="org/**/*.java tools/**/*.*"/>
        </copy>

        <replace description="update build number" file="${build.dir}/WEB-INF/classes/org/chiba/xml/xforms/version.info">
            <replacefilter token="@version.major@" value="${app.version}"/>
            <replacefilter token="@version.build@" value="${DSTAMP}/${TSTAMP}"/>
        </replace>

        <!-- copies images (used for ChibaAgent)
        <copy todir="${build.dir}/WEB-INF/classes" filtering="false">
            <fileset dir="${src.dir}" includes="**/*.png"/>
        </copy>
         -->

        <copy description="copy web.xml" file="${etc.dir}/web.xml" todir="${build.dir}/WEB-INF"/>
        <copy description="copy log4j config" file="${etc.dir}/log4j.xml" todir="${build.dir}/WEB-INF"/>
        <copy description="copy log4j dtd" file="${etc.dir}/log4j.dtd" todir="${build.dir}/WEB-INF"/>

        <copy description="copy web pages" todir="${build.dir}" filtering="true">
            <fileset dir="${web.dir}">
                <include name="*.html"/>
            </fileset>
        </copy>

        <copy description="copy image files" todir="${build.dir}/images" filtering="false">
            <fileset dir="${web.dir}/images"/>
        </copy>

        <copy description="copy jsp pages" todir="${build.dir}/jsp">
            <fileset dir="${web.dir}/jsp"/>
        </copy>

        <copy description="copy CSS stylesheets" todir="${build.dir}/styles">
            <fileset dir="${web.dir}/styles"/>
        </copy>

        <copy description="copy javascript files" todir="${build.dir}/scripts">
            <fileset dir="${web.dir}/scripts"/>
        </copy>

        <copy description="copy sample forms" todir="${build.dir}/${forms.dir}" filtering="true">
            <fileset dir="${web.dir}/${forms.dir}"
                includes="**/*.xhtml **/*.xml"/>
        </copy>

        <copy description="copy XSLT styleheets" todir="${build.dir}/WEB-INF/xslt" filtering="true">
            <fileset dir="${src.dir}/org/chiba/tools/xslt" includes="*.xsl"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!--    building                                                            -->
    <!-- ====================================================================== -->
    <target name="compile-all" depends="prepare" description="compiling all core and extension classes">
        <echo message=""/>
        <echo message="---------- compiling all core and extension classes ----------"/>
        <echo message=""/>

        <filter filtersfile="${tokens.file}"/>

        <javac description="compiling core classes"
            srcdir="${src.dir}"
            destdir="${build.dir}/WEB-INF/classes"
            classpathref="compile.all.class.path"
            debug="on"
            optimize="off"
            deprecation="off"
            />
    </target>

    <target name="javadoc" depends="compile-all" description="create Chiba JavaDoc">
        <javadoc sourcepath="${src.dir}"
            packagenames="org.*"
            classpathref="compile.all.class.path"
            destdir="${javadoc.dir}">
            <fileset dir="${src.dir}"
                defaultexcludes="yes">
                <include name="org/chiba/**.java"/>
                <exclude name="**/test/**"/>
            </fileset>
        </javadoc>

    </target>

    <!-- ====================================================================== -->
    <!-- deployment                                                             -->
    <!-- ====================================================================== -->
    <target name="deploy-prepare" depends="compile-all">
        <!-- create needed directories -->
        <echo message=""/>
        <echo message="---------- preparing webapp directory structure ----------"/>
        <echo message=""/>
        <mkdir dir="${deploy.dir}"/>
        <mkdir dir="${deploy.dir}/WEB-INF/lib"/>
        <mkdir dir="${deploy.dir}/WEB-INF"/>
        <mkdir dir="${deploy.dir}/WEB-INF/classes"/>
        <mkdir dir="${deploy.dir}/WEB-INF/xslt"/>
        <mkdir dir="${deploy.dir}/${forms.dir}"/>
        <mkdir dir="${deploy.dir}/documents"/>
        <mkdir dir="${deploy.dir}/api"/>
        <mkdir dir="${deploy.dir}/images"/>
        <mkdir dir="${deploy.dir}/tmp"/>
        <mkdir dir="${deploy.dir}/upload"/>

    </target>

    <target name="deploy" depends="deploy-prepare, publish" description="deploy Chiba into your webcontainer">
        <filter filtersfile="${tokens.file}"/>

        <copy file="${etc.dir}/web.xml" todir="${deploy.dir}/WEB-INF" description="webapp configuration file"/>
        <copy file="${etc.dir}/log4j.xml" todir="${deploy.dir}/WEB-INF" description="log4j configuration file"/>

        <copy todir="${deploy.dir}/WEB-INF/xslt" filtering="true" description="XSLT stylesheets">
            <fileset dir="${build.dir}/WEB-INF/xslt"/>
        </copy>

        <copy todir="${deploy.dir}" description="html pages">
            <fileset dir="${build.dir}">
                <include name="*.html"/>
            </fileset>
        </copy>

        <copy todir="${deploy.dir}" description="Chiba Cookbook">
            <fileset dir="${doc.dir}">
                <include name="chibacookbook.pdf"/>
            </fileset>
        </copy>

        <copy todir="${deploy.dir}/api" description="API doc files">
            <fileset dir="${doc.dir}/api"/>
        </copy>

        <copy todir="${deploy.dir}/jsp" description="jsp files">
            <fileset dir="${build.dir}/jsp"/>
        </copy>

        <copy todir="${deploy.dir}/styles" description="CSS files">
            <fileset dir="${build.dir}/styles"/>
        </copy>

        <copy todir="${deploy.dir}/scripts" description="javascript files">
            <fileset dir="${build.dir}/scripts"/>
        </copy>

        <copy todir="${deploy.dir}/${forms.dir}" filtering="true" description="sample forms">
            <fileset dir="${build.dir}/${forms.dir}"
                includes="**/*.xhtml **/*.xml"/>
        </copy>

        <copy todir="${deploy.dir}/${forms.dir}/conformance" description="conformance test files">
            <fileset dir="${src.dir}/org/chiba/test/conformance"
                excludes="**/*.java"/>
        </copy>

        <copy todir="${deploy.dir}/images" filtering="false" description="image files">
            <fileset dir="${build.dir}/images"/>
        </copy>

        <copy todir="${deploy.dir}/WEB-INF/lib" description="lib files">
            <fileset dir="${lib.dir}">
                <include name="activation.jar"/>
                <include name="commons-codec-1.2.jar"/>
                <include name="commons-fileupload-1.0.jar"/>
                <include name="commons-httpclient-2.0.1.jar"/>
                <include name="commons-jxpath-1.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="dom3-xercesImpl.jar"/>
                <include name="dom3-xml-apis.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="mail.jar"/>
            </fileset>
        </copy>

        <copy todir="${deploy.dir}/WEB-INF/classes" description="java class files and runtime resources" includeemptydirs="false">
            <fileset dir="${build.dir}/WEB-INF/classes"
                excludes="**/test/**/*.* **/Makefile"/>
        </copy>

    </target>

    <!-- ================================================== -->
    <!--    distribution                                    -->
    <!-- ================================================== -->
    <!-- creates three distribution files.
    [1] chiba-x.y-src.tar.gz - Unix style source-file
    [2] chiba-x.y-src.zip - Windows style source-file
        both contain the complete source tree
    [3] chiba-x.y.war
        which contains a complete stand alone chiba webarchive (including
        forms, integrating jsps, images, additional stylesheets for
        application integration etc.)  This second jar is NOT the jar to use
        for integration in your application!  Use the target 'build-chiba-jar' for
        that purpose!
    -->
    <target name="distribute" depends="compile-all,javadoc,publish">
        <mkdir dir="${dist.dir}"/>

        <!-- build src dist -->
        <delete dir="${app.name}-${app.version}"/>
        <mkdir dir="${app.name}-${app.version}"/>
        <copy todir="${app.name}-${app.version}">
            <fileset dir="."
                includes="${src.dir}/**,${lib.dir}/**,${etc.dir}/**,build*.xml,*.txt,*.properties"
                excludes="${dist.dir},${build.dir},${doc.dir},${web.dir}/**,**/*~,**/*.SIK,**/*.BAK,**/*.DS_Store"/>
        </copy>
        <!-- copy this separately to enable token filtering -->
        <filter filtersfile="${tokens.file}"/>
        <copy todir="${app.name}-${app.version}" filtering="true">
            <fileset dir="." includes="${web.dir}/**" excludes="${web.dir}/images/**"/>
        </copy>
        <copy todir="${app.name}-${app.version}" filtering="false">
            <fileset dir="." includes="${web.dir}/images/**"/>
        </copy>
        <zip zipfile="${dist.dir}/${app.name}-${app.version}-src.zip"
            basedir="."
            includes="${app.name}-${app.version}/"/>
        <tar tarfile="${dist.dir}/${app.name}-${app.version}-src.tar"
            basedir="."
            includes="${app.name}-${app.version}/"/>
        <gzip zipfile="${dist.dir}/${app.name}-${app.version}-src.tar.gz"
            src="${dist.dir}/${app.name}-${app.version}-src.tar"/>
        <delete file="${dist.dir}/${app.name}-${app.version}-src.tar"/>
        <delete dir="${app.name}-${app.version}"/>

        <!-- copy apidocs -->
        <copy todir="${build.dir}">
            <fileset dir="${doc.dir}" includes="api/**"/>
        </copy>

        <!-- build war dist -->
        <delete file="${build.dir}/WEB-INF/web.xml"/>
        <war warfile="${dist.dir}/${app.name}-${app.version}.war"
            webxml="${etc.dir}/web.xml"
            basedir="${build.dir}"
            excludes="**/test/**">
            <lib dir="${lib.dir}">
                <include name="activation.jar"/>
                <include name="commons-codec-1.2.jar"/>
                <include name="commons-fileupload-1.0.jar"/>
                <include name="commons-httpclient-2.0.1.jar"/>
                <include name="commons-jxpath-1.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="dom3-xercesImpl.jar"/>
                <include name="dom3-xml-apis.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="mail.jar"/>
            </lib>
        </war>

    </target>


    <!-- ================================================== -->
    <!--    cleanup                                         -->
    <!-- ================================================== -->
    <target name="clean" description="clean all classes">
        <delete dir="${build.dir}/WEB-INF/classes">
            <fileset dir="."
                includes="*.class"/>
        </delete>
    </target>

    <target name="clean-all" description="clean the complete build-dir">
        <delete dir="${build.dir}"/>
        <delete dir="${doc.dir}/api"/>
        <delete dir="${doc.dir}/test"/>
        <delete dir="${test.dir}"/>
    </target>

    <target name="kill-all" depends="clean-all">
        <delete dir="${deploy.dir}"/>
    </target>

    <!-- ================================================== -->
    <!--    various jar packaging targets                   -->
    <!-- ================================================== -->

    <!-- Produces a chiba.jar - cause not every situation/combination of libs can be foreseen there's an
    exclude-file called excludes.properties which allows you to steer what's in and what's not. -->
    <target name="build-chiba-jar" depends="clean, compile-optimized"
        description="builds Chiba standalone jarfile - needs dependent libs to execute!">

        <echo message="---------- creating dist directory ----------"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/dependent-libs"/>


        <echo message="---------- copying dependent libs for convenience ----------"/>
        <echo message="---------- these libs must be included in runtime classpath ----------"/>
        <copy todir="${dist.dir}/dependent-libs">
            <fileset dir="${lib.dir}">
                <include name="activation.jar"/>
                <include name="commons-codec-1.2.jar"/>
                <include name="commons-fileupload-1.0.jar"/>
                <include name="commons-httpclient-2.0.1.jar"/>
                <include name="commons-jxpath-1.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="dom3-xercesImpl.jar"/>
                <include name="dom3-xml-apis.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="mail.jar"/>
            </fileset>
        </copy>

        <echo message="---------- copying resources ----------"/>
        <tstamp/>
        <copy file="${src.dir}/org/chiba/xml/xforms/version.info" todir="${build.dir}/classes/org/chiba/xml/xforms"/>
        <replace description="update build number" file="${build.dir}/classes/org/chiba/xml/xforms/version.info">
            <replacefilter token="@version.major@" value="${app.version}"/>
            <replacefilter token="@version.build@" value="${DSTAMP}/${TSTAMP}"/>
        </replace>
        <copy todir="${build.dir}/classes/org/chiba/tools/xslt">
            <fileset dir="${src.dir}/org/chiba/tools/xslt" includes="*.xsl"/>
        </copy>
        <copy file="${src.dir}/org/chiba/xml/xforms/config/default.xml" todir="${build.dir}/classes/org/chiba/xml/xforms/config"/>
        <copy file="${src.dir}/org/chiba/xml/xforms/config/XFormsDatatypes.xsd" todir="${build.dir}/classes/org/chiba/xml/xforms/config"/>

        <echo message="---------- building Chiba jar ----------"/>
        <jar jarfile="${dist.dir}/${app.name}-${app.version}.jar" basedir="${build.dir}/classes"/>

    </target>

    <target name="build-chiba-schemabuilder-jar" depends="compile-all"
        description="builds Chiba schemabuilder tool jarfile">

        <echo message="---------- creating dist directory ----------"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/schemabuilder-dependent-libs"/>

        <echo message="---------- copying dependent libs for convenience ----------"/>
        <echo message="---------- these libs must be included in runtime classpath ----------"/>
        <copy todir="${dist.dir}/schemabuilder-dependent-libs">
            <fileset dir="${lib.dir}">
                <include name="dom3-xercesImpl.jar"/>
                <include name="dom3-xml-apis.jar"/>
                <include name="log4j-1.2.8.jar"/>
            </fileset>
        </copy>

        <echo message="---------- building Chiba schemabuilder jar ----------"/>
        <jar jarfile="${dist.dir}/chiba-schemabuilder.jar"
            basedir="${build.dir}/WEB-INF/classes"
            excludes="**/test/**, **/org/chiba/adapter/**, **/org/chiba/connectors/**, **/org/chiba/tools/xslt/**, **/org/chiba/xml/xforms/**, **/WEB-INF/**, **/.depedency-info/**"/>

    </target>

    <!-- ================================================== -->
    <!--    compile core distribution                       -->
    <!-- ================================================== -->
    <target name="compile-optimized">
        <mkdir dir="${build.dir}/classes"/>
        <echo message="---------- optimized compile of core classes without debug info ----------"/>

        <javac srcdir="${src.dir}"
            destdir="${build.dir}/classes"
            excludesfile="${excludes}"
            classpathref="jar.compile.class.path"
            debug="off"
            optimize="on"
            verbose="off"
            deprecation="off"/>

    </target>

    <!-- ================================================== -->
    <!--    testing                                         -->
    <!-- ================================================== -->
    <target name="junit" depends="compile-all" description="runs all junit tests">
        <mkdir dir="${test.dir}"/>

        <junit printsummary="on">
            <classpath refid="compile.all.class.path"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.dir}">
                <fileset dir="${src.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>

        <junitreport todir="${test.dir}">
            <fileset dir="${test.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${doc.dir}/test"/>
        </junitreport>
    </target>

    <!-- ================================================== -->
    <!--    Schema2XForms                                   -->
    <!-- generates a complete W3C XForms document from a XML Schema input. -->
    <!-- ================================================== -->
    <target name="schema2XForms" depends="compile-all" description="Schema2XForms generator target">

        <!--<taskdef name="Schema2XForms" classname="org.chiba.tools.schemabuilder.Schema2XForms" classpathref="run.class.path"
        />
        <Schema2XForms
            inputURI="${schema2XForms.xforms.dir}/${schema2XForms.xform}/${schema2XForms.xform}.xsd"
            rootTagName="${schema2XForms.rootTagName}"
            outputFile="${schema2XForms.generated.dir}/${schema2XForms.xform}/${schema2XForms.xform}.xml"
            instanceFile="${schema2XForms.instanceFile}"
            instanceHref="${schema2XForms.instanceHref}"
            action="${schema2XForms.action}"
            submitMethod="${schema2XForms.submitMethod}"
wrapperType="${schema2XForms.wrapperType}"
stylesheet="${schema2XForms.stylesheet}"
            base="${schema2XForms.base}"
	    useSchemaTypes="{schema2XForms.useSchemaTypes}"
            />
        -->
        <!-- problem with taskdef: no "fork" possible !
            -> we have to use java directly because of Xerces version problems (DOMImplementation for xs not found)
         -->
        <java fork="yes" classname="org.chiba.tools.schemabuilder.Schema2XForms"
            classpathref="run.class.path">
            <arg line="inputURI=${schema2XForms.xforms.dir}/${schema2XForms.xform}/${schema2XForms.xform}.xsd rootTagName=${schema2XForms.rootTagName} outputFile=${schema2XForms.generated.dir}/${schema2XForms.xform}/${schema2XForms.xform}.xml instanceFile=${schema2XForms.instanceFile} instanceHref=${schema2XForms.instanceHref} action=${schema2XForms.action} submitMethod=${schema2XForms.submitMethod} wrapperType=${schema2XForms.wrapperType} stylesheet=${schema2XForms.stylesheet} base=${schema2XForms.base} useSchemaTypes=${schema2XForms.useSchemaTypes}"/>
        </java>

    </target>

    <!-- ================================================== -->
    <!--    targets for building Chiba web pages from xml   -->
    <!-- ================================================== -->
    <target name="init">
        <tstamp>
            <format property="now" pattern="dd/MM/yyyy hh:mm aa"
                unit="hour"/>

        </tstamp>
        <echo message="current date: ${now}"/>
    </target>

    <target name="publish" depends="init">

        <delete dir="${web.dir}/online-pages"/>
        <style basedir="${web.dir}/xml"
            destdir="${web.dir}"
            extension=".html"
            style="${web.dir}/xml/xsl/simplelayout.xsl"
            includes="*.xml">
            <param name="upDate" expression="${now}"/>
        </style>
    </target>

    <!-- create web-pages for sourceforge - these exclude the link to the sammples in the menu -->
    <target name="publish-online" depends="init">
        <filter filtersfile="${tokens.file}"/>
        <mkdir dir="${web.dir}/online"/>
        <style basedir="${web.dir}/xml"
            destdir="${web.dir}/online"
            extension=".html"
            style="${web.dir}/xml/xsl/online.xsl"
            includes="*.xml">
            <param name="upDate" expression="${now}"/>
        </style>
        <!-- <mkdir dir="${web.dir}/online-pages"/> -->
        <copy todir="${web.dir}" filtering="true">
            <fileset dir="${web.dir}/online" includes="*.html"/>
        </copy>
        <!-- <delete dir="${web.dir}/online"/> -->

    </target>

</project>
