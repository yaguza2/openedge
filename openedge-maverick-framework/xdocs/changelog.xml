<?xml version="1.0"?>
<document>

	<properties>
		<title>OpenEdge Maverick framework Changelog</title>
		<author email="eelco.hillenius@openedge.nl">Eelco Hillenius</author>
	</properties>

	<body>
		<section name="Changelog">
			<p>A short description of changes is given for each release</p>

			<subsection name="1.4.7">
				<ul>

					<li>massive refactor in order to make the internals of FormBeanCtrl more transparant.</li>

					<li>added (flow) interceptors and interception points.</li>

					<li>more documentation.</li>

				</ul>
			</subsection>

			<subsection name="1.4.6">
				<ul>

					<li>(finally) added unit tests.</li>

					<li>(and finally as well) added a manual.</li>

					<li>some minor doc/ variable name changes.</li>

					<li>
						added the ability to reuse the instance of FormBeanContext in one request. This is convenient
						when linking (dispatching) controlls within one request. This is turned on by default. Set
						property reuseFormBeanContext to false if you do not want to have the formBeanContext reused
						within a request.
					</li>
					<li>
						FormBeanContext is now a decorator for HashMap. You can now add arbitrary attributes. You can
						use this as an alternative for request attributes (and Maverick view params for that matter).
						This is a good idea when you do include request parameters in the population process, but want
						certain attributes not to be included in the population. An example of such a case is a user
						message that you want to have passed through the chain of commands an ultimately have available
						for the view without having an effect on the form bean population.
					</li>
					<li>better error reporting for field validation.</li>

					<li>converted most throwable.printStackTrace to Logger.log(String, throwable).</li>

				</ul>
			</subsection>
			<subsection name="1.4.5">
				<ul>

					<li>bugfix: pattern was not passed in Formatter.format method.</li>

				</ul>
			</subsection>
			<subsection name="1.4.4">
				<ul>

					<li>
						fixed a bug that ignored empty request parameters (empty strings) in the population process.
						They are now interpreted as a null or an empty string, depending on the property
						setNullForEmptyString in FormBeanCtrl.
					</li>

				</ul>
			</subsection>
			<subsection name="1.4.3">
				<ul>

					<li>
						added property doPerformIfFieldValidationFailed (default == false). If true, the perform method
						of the control will be executed, even if the population/ validation failed. Use this only in
						very special cases; extended usage will probably result in messy source code.
					</li>

				</ul>
			</subsection>
			<subsection name="1.4.2">
				<ul>

					<li>
						if a validator returns null with getErrorMessage, the error will not be set in the
						formBeanContext (and thus will not set any previously set message to null).
					</li>
					<li>
						extra debug info om population and validation; created special log for this with name:
						'nl.openedge.maverick.framework.population'.
					</li>
					<li>
						extra debug info formatting; created special log for this with name:
						'nl.openedge.maverick.framework.formatting'.
					</li>
					<li>
						added property doFormValidationIfFieldValidationFailed (default == true). If true, the
						registered form validators will be executed even if the field validators failed.
					</li>

				</ul>
			</subsection>
			<subsection name="1.4.1">
				<ul>

					<li>fixed doValidation bug(s).</li>

					<li>removed not used property copyRequestToOverride.</li>

					<li>added optional property doFormValidationIfFieldValidationFailed (true by default).</li>

				</ul>
			</subsection>
			<subsection name="1.4">
				<ul>

					<li>renamed FormBean to FormBeanContext.</li>

					<li>
						FormBeanContext is now a wrapper for the bean that should be populated. Clients of this project
						are now free to use whatever bean they wish to populate; it is not nescesarry (or even useful)
						to extend FormBeanContext. The only class that clients must extend in order to use this
						framework is FormBeanCtrl.
					</li>

					<li>moved isNullOrEmpty from FormBeanContext to FormBeanCtrl.</li>

					<li>
						removed application specific behaviour:
						<ul>
							<li>property needsValidUser in FormBeanCtrl.</li>
							<li>property userPrincipal in FormBeanContext.</li>
						</ul>
					</li>

					<li>changed signature of perform; formBean -> formBeanContext.</li>

					<li>removed dependency on openedge-access.</li>

					<li>fixed various inefficiencies.</li>

					<li>added interceptor for error population.</li>

				</ul>
			</subsection>
			<subsection name="1.3">
				<ul>

					<li>AbstractCtrl renamed to FormBeanCtrl and AbstractForm renamed to FormBean.</li>

					<li>Removed default implementation of FormBeanCtrl.perform and set method to abstract.</li>

					<li>
						Removed ApplicationServlet. Applications should provide their own startup code. Defaults are
						now set in the ConverterRegistry.
					</li>

					<li>Added Map to method isNullOrEmpty.</li>

					<li>doBefore and doAfter are now replaced with a more generic interceptor mechanism.</li>

					<li>
						Removed method getPrefixedFieldsFromRequest. Uses (like checkboxes) of this method should be
						replaced with a Map.
					</li>

					<li>
						Moved Velocity tools from this project to OpenEdge Util. (was package
						nl.openedge.maverick.framework.velocity.tools, is now package nl.openedge.util.velocity.tools).
					</li>

					<li>
						Removed lastrequest property in FormBean and redirect logica in FormBeanCtrl. It was not used
						currently, and did not seem to add much.
					</li>

					<li>Misc documentation.</li>

					<li>Removed deprecated method validateForm.</li>

					<li>Added clear() and deregisterByConverterClass to ConverterRegistry.</li>

					<li>Added validator RegexValidator.</li>

					<li>Removed some not-needed dependencies.</li>

				</ul>
			</subsection>
			<subsection name="1.2.1">
				<ul>

					<li>
						Added a final fallthough for converting; if no Converter is found in the lookup, the registry
						returns an instance of NoopConverter, which does absolutely nothing besides returning the input
						value unaltered.
					</li>
					<li>
						Fixed a bug in the population process that prevented working with mapped values (and (had the
						potential of errors when working with indexed values).
					</li>

				</ul>
			</subsection>
			<subsection name="1.2">
				<ul>

					<li>
						Velocity tool nl.openedge.maverick.framework.velocity.tools.FieldTool is removed.
						$!{fieldTool.getFormValueAsString($model, $displayfieldname)} should be replaced with:
						$!{model.displayProperty($fieldname)} and $!{fieldTool.getFormattedFormValueAsString($model,
						$fieldname, $pattern)} should be replaced with: $!{model.displayProperty($fieldname, $pattern)}
					</li>
					<li>
						Converters are now used with a registry nl.openedge.maverick.ConverterRegistry. The converters
						that are registered with BeanUtils are only used as a fallthrough. Form population can now be
						used in a localized environment, and is not dependent on the current BeanUtils registration.
						Converters are looked up with the following algoritm:
						<ol>
							<li>
								If a locale is given the first search is for a converter that was registered for the
								given type and locale.
							</li>
							<li>
								If it is not found, the second search is for any converter of the type LocaleConverter
								that was registered for the given type. If it is found, a new instance will be created
								for the given locale, the pattern will be copied if possible and the newly instantiated
								converter will be registered for the given type and locale (and thus will be found at
								the first search next time).
							</li>
							<li>
								If it is not found, the search is the same as when no locale was given (locale ==
								null): the 'normal', not localized registry will be searched for an entry with the
								given type.
							</li>
							<li>
								If this is not found either, a lookup with ConvertUtils from Jakarta Commons BeanUtils
								will be done as a fallthrough.
							</li>
						</ol>
					</li>
					<li>
						Formatting of property values will be done as follows: If an object was found for the given
						property name, it will be formatted with the formatter found as follows:
						<ol>
							<li>
								look in the ConverterRegistry if a formatter was stored with the fieldname and
								optionally locale as key.
							</li>
							<li>
								if not found, look in the ConverterRegistry if a formatter was stored with the pattern
								and optionally the locale as key.
							</li>
							<li>
								if not found, look in the ConverterRegistry if a Converter was stored for the type of
								the property that implements Formatter (as well as Converter). If a formatter was
								found, it will be used for formatting the property (using the format(property, pattern)
								method). If not, ConvertUtils of the BeanUtils package is used to get the string
								representation of the property.
							</li>
						</ol>
					</li>
					<li>
						Formatting of objects can be done skipping the lookup of a corresponding property in the
						current form. This can be used for formatting arbitrary objects in a manner that is consistent
						with the rest of the webapp. The formatting algoritm is the same as with the formatting of
						property values as described above.
					</li>
					<li>
						custom field populators can be registered on field level and on regexp level. Besides extra
						flexibility, this has a special security releated purpose: you might want to 'block' the
						population of certain properties like id's etc. The population is done like this:
						<ol>
							<li>
								if any regexp populators were registered, for all fields that are matched, these
								populators are used and the fields are removed from the list of parameters to process.
							</li>
							<li>
								for the remainder of the parameters: see if a custom field populator is registered for
								the current field name. If found, use this populator, if not:
							</li>
							<li>use the default populator.</li>
						</ol>
					</li>
					<li>
						the current locale is stored in AbstractForm. The current locale is found with the protected
						method getLocaleForRequest in AbstractCtrl and works as following:
						<ol>
							<li>
								if a java.security.Principal was saved in the form (getUserPrincipal) AND the principal
								is an instance of nl.openedge.access.UserPrincipal, it's Locale will be used.
							</li>
							<li>
								if a Locale was saved in the HttpSession object with key _currentLocale this value will
								be used, overriding the former found Locale if one was found.
							</li>
							<li>
								if the two above actions did not result in a Locale, the browser preferences that are
								sent with the request are used (HttpServletRequest.getLocale()).
							</li>
						</ol>
					</li>

					<li>
						The principal that is optionally saved in the form is now of type java.security.Principal
						instead of (implementing class) nl.openedge.access.UserPrincipal. This gives you greater
						flexibility with which authorization model to work.
					</li>

					<li>
						moved velocity tools from package 'nl.openedge.maverick.framework.util' to
						'nl.openedge.maverick.framework.velocity.tools'. Users should at least update their velocity
						tools configuration.
					</li>

					<li>minor performance enhancements with population.</li>

					<li>fixed bug that prevented working with arrays correctly.</li>

					<li>various minor bugfixes.</li>

				</ul>
			</subsection>
			<subsection name="1.1">
				<ul>

					First (numbered) release
					<li>
						Validators on field and form level (validateForm is now deprecated and will be removed in 1.3).
					</li>

					<li>Form population.</li>

					<li>Error handling.</li>

					<li>Etc.</li>

				</ul>
			</subsection>

		</section>
	</body>
</document>
