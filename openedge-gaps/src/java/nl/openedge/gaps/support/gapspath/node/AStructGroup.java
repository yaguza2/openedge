/* This file was generated by SableCC (http://www.sablecc.org/). */

package nl.openedge.gaps.support.gapspath.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import nl.openedge.gaps.support.gapspath.analysis.Analysis;

public final class AStructGroup extends PStructGroup {

    private TSlash _slash_;

    private TId _id_;

    private final LinkedList _structGroupTail_ = new TypedLinkedList(new StructGroupTail_Cast());

    public AStructGroup() {
    }

    public AStructGroup(TSlash _slash_, TId _id_, List _structGroupTail_) {
        setSlash(_slash_);

        setId(_id_);

        {
            this._structGroupTail_.clear();
            this._structGroupTail_.addAll(_structGroupTail_);
        }

    }

    public Object clone() {
        return new AStructGroup((TSlash) cloneNode(_slash_), (TId) cloneNode(_id_),
                cloneList(_structGroupTail_));
    }

    public void apply(Switch sw) {
        ((Analysis) sw).caseAStructGroup(this);
    }

    public TSlash getSlash() {
        return _slash_;
    }

    public void setSlash(TSlash node) {
        if (_slash_ != null) {
            _slash_.parent(null);
        }

        if (node != null) {
            if (node.parent() != null) {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _slash_ = node;
    }

    public TId getId() {
        return _id_;
    }

    public void setId(TId node) {
        if (_id_ != null) {
            _id_.parent(null);
        }

        if (node != null) {
            if (node.parent() != null) {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public LinkedList getStructGroupTail() {
        return _structGroupTail_;
    }

    public void setStructGroupTail(List list) {
        _structGroupTail_.clear();
        _structGroupTail_.addAll(list);
    }

    public String toString() {
        return "" + toString(_slash_) + toString(_id_) + toString(_structGroupTail_);
    }

    void removeChild(Node child) {
        if (_slash_ == child) {
            _slash_ = null;
            return;
        }

        if (_id_ == child) {
            _id_ = null;
            return;
        }

        if (_structGroupTail_.remove(child)) { return; }

    }

    void replaceChild(Node oldChild, Node newChild) {
        if (_slash_ == oldChild) {
            setSlash((TSlash) newChild);
            return;
        }

        if (_id_ == oldChild) {
            setId((TId) newChild);
            return;
        }

        for (ListIterator i = _structGroupTail_.listIterator(); i.hasNext();) {
            if (i.next() == oldChild) {
                if (newChild != null) {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class StructGroupTail_Cast implements Cast {

        public Object cast(Object o) {
            PStructGroupTail node = (PStructGroupTail) o;

            if ((node.parent() != null) && (node.parent() != AStructGroup.this)) {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) || (node.parent() != AStructGroup.this)) {
                node.parent(AStructGroup.this);
            }

            return node;
        }
    }
}