/* This file was generated by SableCC (http://www.sablecc.org/). */

package nl.openedge.gaps.support.gapspath.analysis;

import nl.openedge.gaps.support.gapspath.node.AAndOptionsPartTail;
import nl.openedge.gaps.support.gapspath.node.AArraySelect;
import nl.openedge.gaps.support.gapspath.node.AAttribute;
import nl.openedge.gaps.support.gapspath.node.AGroupPath;
import nl.openedge.gaps.support.gapspath.node.AOptions;
import nl.openedge.gaps.support.gapspath.node.AOptionsBlock;
import nl.openedge.gaps.support.gapspath.node.AOptionsPart;
import nl.openedge.gaps.support.gapspath.node.AOrOptionsPartTail;
import nl.openedge.gaps.support.gapspath.node.AParam;
import nl.openedge.gaps.support.gapspath.node.AParamGroup;
import nl.openedge.gaps.support.gapspath.node.AParamPath;
import nl.openedge.gaps.support.gapspath.node.ARootStructGroup;
import nl.openedge.gaps.support.gapspath.node.AStructGroup;
import nl.openedge.gaps.support.gapspath.node.AStructGroupTail;
import nl.openedge.gaps.support.gapspath.node.EOF;
import nl.openedge.gaps.support.gapspath.node.Node;
import nl.openedge.gaps.support.gapspath.node.Start;
import nl.openedge.gaps.support.gapspath.node.Switch;
import nl.openedge.gaps.support.gapspath.node.TAnd;
import nl.openedge.gaps.support.gapspath.node.TAt;
import nl.openedge.gaps.support.gapspath.node.TBlank;
import nl.openedge.gaps.support.gapspath.node.TColon;
import nl.openedge.gaps.support.gapspath.node.TEq;
import nl.openedge.gaps.support.gapspath.node.TId;
import nl.openedge.gaps.support.gapspath.node.TLBrace;
import nl.openedge.gaps.support.gapspath.node.TLBracket;
import nl.openedge.gaps.support.gapspath.node.TOr;
import nl.openedge.gaps.support.gapspath.node.TQuote;
import nl.openedge.gaps.support.gapspath.node.TRBrace;
import nl.openedge.gaps.support.gapspath.node.TRBracket;
import nl.openedge.gaps.support.gapspath.node.TSlash;

public interface Analysis extends Switch {

    Object getIn(Node node);

    void setIn(Node node, Object in);

    Object getOut(Node node);

    void setOut(Node node, Object out);

    void caseStart(Start node);

    void caseAGroupPath(AGroupPath node);

    void caseAParamPath(AParamPath node);

    void caseARootStructGroup(ARootStructGroup node);

    void caseAStructGroup(AStructGroup node);

    void caseAStructGroupTail(AStructGroupTail node);

    void caseAParamGroup(AParamGroup node);

    void caseAParam(AParam node);

    void caseAArraySelect(AArraySelect node);

    void caseAAttribute(AAttribute node);

    void caseAOptions(AOptions node);

    void caseAOptionsBlock(AOptionsBlock node);

    void caseAAndOptionsPartTail(AAndOptionsPartTail node);

    void caseAOrOptionsPartTail(AOrOptionsPartTail node);

    void caseAOptionsPart(AOptionsPart node);

    void caseTAnd(TAnd node);

    void caseTOr(TOr node);

    void caseTLBracket(TLBracket node);

    void caseTRBracket(TRBracket node);

    void caseTLBrace(TLBrace node);

    void caseTRBrace(TRBrace node);

    void caseTSlash(TSlash node);

    void caseTAt(TAt node);

    void caseTColon(TColon node);

    void caseTId(TId node);

    void caseTEq(TEq node);

    void caseTQuote(TQuote node);

    void caseTBlank(TBlank node);

    void caseEOF(EOF node);
}