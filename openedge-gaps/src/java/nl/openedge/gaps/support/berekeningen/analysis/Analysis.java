/* This file was generated by SableCC (http://www.sablecc.org/). */

package nl.openedge.gaps.support.berekeningen.analysis;

import nl.openedge.gaps.support.berekeningen.node.ABlock;
import nl.openedge.gaps.support.berekeningen.node.ACallExp;
import nl.openedge.gaps.support.berekeningen.node.ACastMinusExp;
import nl.openedge.gaps.support.berekeningen.node.ACastPlusExp;
import nl.openedge.gaps.support.berekeningen.node.ADivExp;
import nl.openedge.gaps.support.berekeningen.node.AIdExp;
import nl.openedge.gaps.support.berekeningen.node.AIfThen;
import nl.openedge.gaps.support.berekeningen.node.AMinusExp;
import nl.openedge.gaps.support.berekeningen.node.AMultExp;
import nl.openedge.gaps.support.berekeningen.node.ANumberExp;
import nl.openedge.gaps.support.berekeningen.node.APlusExp;
import nl.openedge.gaps.support.berekeningen.node.EOF;
import nl.openedge.gaps.support.berekeningen.node.Node;
import nl.openedge.gaps.support.berekeningen.node.Start;
import nl.openedge.gaps.support.berekeningen.node.Switch;
import nl.openedge.gaps.support.berekeningen.node.TBlank;
import nl.openedge.gaps.support.berekeningen.node.TComma;
import nl.openedge.gaps.support.berekeningen.node.TDiv;
import nl.openedge.gaps.support.berekeningen.node.TFuncid;
import nl.openedge.gaps.support.berekeningen.node.TId;
import nl.openedge.gaps.support.berekeningen.node.TLBrace;
import nl.openedge.gaps.support.berekeningen.node.TLPar;
import nl.openedge.gaps.support.berekeningen.node.TMinus;
import nl.openedge.gaps.support.berekeningen.node.TMult;
import nl.openedge.gaps.support.berekeningen.node.TNumber;
import nl.openedge.gaps.support.berekeningen.node.TPlus;
import nl.openedge.gaps.support.berekeningen.node.TRBrace;
import nl.openedge.gaps.support.berekeningen.node.TRPar;

public interface Analysis extends Switch {

    Object getIn(Node node);

    void setIn(Node node, Object in);

    Object getOut(Node node);

    void setOut(Node node, Object out);

    void caseStart(Start node);

    void caseABlock(ABlock node);

    void caseAIfThen(AIfThen node);

    void caseAPlusExp(APlusExp node);

    void caseAMinusExp(AMinusExp node);

    void caseADivExp(ADivExp node);

    void caseAMultExp(AMultExp node);

    void caseACastPlusExp(ACastPlusExp node);

    void caseACastMinusExp(ACastMinusExp node);

    void caseANumberExp(ANumberExp node);

    void caseAIdExp(AIdExp node);

    void caseACallExp(ACallExp node);

    void caseTLPar(TLPar node);

    void caseTRPar(TRPar node);

    void caseTPlus(TPlus node);

    void caseTMinus(TMinus node);

    void caseTMult(TMult node);

    void caseTDiv(TDiv node);

    void caseTComma(TComma node);

    void caseTLBrace(TLBrace node);

    void caseTRBrace(TRBrace node);

    void caseTBlank(TBlank node);

    void caseTNumber(TNumber node);

    void caseTId(TId node);

    void caseTFuncid(TFuncid node);

    void caseEOF(EOF node);
}