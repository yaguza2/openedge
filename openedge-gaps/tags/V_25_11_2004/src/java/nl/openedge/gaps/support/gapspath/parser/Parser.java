/* This file was generated by SableCC (http://www.sablecc.org/). */

package nl.openedge.gaps.support.gapspath.parser;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import nl.openedge.gaps.support.gapspath.analysis.Analysis;
import nl.openedge.gaps.support.gapspath.analysis.AnalysisAdapter;
import nl.openedge.gaps.support.gapspath.lexer.Lexer;
import nl.openedge.gaps.support.gapspath.lexer.LexerException;
import nl.openedge.gaps.support.gapspath.node.AAndOptionsPartTail;
import nl.openedge.gaps.support.gapspath.node.AArraySelect;
import nl.openedge.gaps.support.gapspath.node.AAttribute;
import nl.openedge.gaps.support.gapspath.node.AGroupPath;
import nl.openedge.gaps.support.gapspath.node.AOptions;
import nl.openedge.gaps.support.gapspath.node.AOptionsBlock;
import nl.openedge.gaps.support.gapspath.node.AOptionsPart;
import nl.openedge.gaps.support.gapspath.node.AOrOptionsPartTail;
import nl.openedge.gaps.support.gapspath.node.AParam;
import nl.openedge.gaps.support.gapspath.node.AParamGroup;
import nl.openedge.gaps.support.gapspath.node.AParamPath;
import nl.openedge.gaps.support.gapspath.node.ARootStructGroup;
import nl.openedge.gaps.support.gapspath.node.AStructGroup;
import nl.openedge.gaps.support.gapspath.node.AStructGroupTail;
import nl.openedge.gaps.support.gapspath.node.EOF;
import nl.openedge.gaps.support.gapspath.node.NodeCast;
import nl.openedge.gaps.support.gapspath.node.PArraySelect;
import nl.openedge.gaps.support.gapspath.node.PAttribute;
import nl.openedge.gaps.support.gapspath.node.POptions;
import nl.openedge.gaps.support.gapspath.node.POptionsBlock;
import nl.openedge.gaps.support.gapspath.node.POptionsPart;
import nl.openedge.gaps.support.gapspath.node.POptionsPartTail;
import nl.openedge.gaps.support.gapspath.node.PParam;
import nl.openedge.gaps.support.gapspath.node.PParamGroup;
import nl.openedge.gaps.support.gapspath.node.PPath;
import nl.openedge.gaps.support.gapspath.node.PStructGroup;
import nl.openedge.gaps.support.gapspath.node.PStructGroupTail;
import nl.openedge.gaps.support.gapspath.node.Start;
import nl.openedge.gaps.support.gapspath.node.Switchable;
import nl.openedge.gaps.support.gapspath.node.TAnd;
import nl.openedge.gaps.support.gapspath.node.TAt;
import nl.openedge.gaps.support.gapspath.node.TColon;
import nl.openedge.gaps.support.gapspath.node.TEq;
import nl.openedge.gaps.support.gapspath.node.TId;
import nl.openedge.gaps.support.gapspath.node.TLBrace;
import nl.openedge.gaps.support.gapspath.node.TLBracket;
import nl.openedge.gaps.support.gapspath.node.TOr;
import nl.openedge.gaps.support.gapspath.node.TQuote;
import nl.openedge.gaps.support.gapspath.node.TRBrace;
import nl.openedge.gaps.support.gapspath.node.TRBracket;
import nl.openedge.gaps.support.gapspath.node.TSlash;
import nl.openedge.gaps.support.gapspath.node.Token;
import nl.openedge.gaps.support.gapspath.node.TypedLinkedList;

public class Parser
{

	public final Analysis ignoredTokens = new AnalysisAdapter();

	protected ArrayList nodeList;

	private final Lexer lexer;

	private final ListIterator stack = new LinkedList().listIterator();

	private int last_shift;

	private int last_pos;

	private int last_line;

	private Token last_token;

	private final TokenIndex converter = new TokenIndex();

	private final int[] action = new int[2];

	private final static int SHIFT = 0;

	private final static int REDUCE = 1;

	private final static int ACCEPT = 2;

	private final static int ERROR = 3;

	public Parser(Lexer lexer)
	{
		this.lexer = lexer;

		if (actionTable == null)
		{
			try
			{
				DataInputStream s = new DataInputStream(new BufferedInputStream(
						Parser.class.getResourceAsStream("parser.dat")));

				// read actionTable
				int length = s.readInt();
				actionTable = new int[length][][];
				for (int i = 0; i < actionTable.length; i++)
				{
					length = s.readInt();
					actionTable[i] = new int[length][3];
					for (int j = 0; j < actionTable[i].length; j++)
					{
						for (int k = 0; k < 3; k++)
						{
							actionTable[i][j][k] = s.readInt();
						}
					}
				}

				// read gotoTable
				length = s.readInt();
				gotoTable = new int[length][][];
				for (int i = 0; i < gotoTable.length; i++)
				{
					length = s.readInt();
					gotoTable[i] = new int[length][2];
					for (int j = 0; j < gotoTable[i].length; j++)
					{
						for (int k = 0; k < 2; k++)
						{
							gotoTable[i][j][k] = s.readInt();
						}
					}
				}

				// read errorMessages
				length = s.readInt();
				errorMessages = new String[length];
				for (int i = 0; i < errorMessages.length; i++)
				{
					length = s.readInt();
					StringBuffer buffer = new StringBuffer();

					for (int j = 0; j < length; j++)
					{
						buffer.append(s.readChar());
					}
					errorMessages[i] = buffer.toString();
				}

				// read errors
				length = s.readInt();
				errors = new int[length];
				for (int i = 0; i < errors.length; i++)
				{
					errors[i] = s.readInt();
				}

				s.close();
			}
			catch (Exception e)
			{
				throw new RuntimeException(
						"The file \"parser.dat\" is either missing or corrupted.");
			}
		}
	}

	private int goTo(int index)
	{
		int state = state();
		int low = 1;
		int high = gotoTable[index].length - 1;
		int value = gotoTable[index][0][1];

		while (low <= high)
		{
			int middle = (low + high) / 2;

			if (state < gotoTable[index][middle][0])
			{
				high = middle - 1;
			}
			else if (state > gotoTable[index][middle][0])
			{
				low = middle + 1;
			}
			else
			{
				value = gotoTable[index][middle][1];
				break;
			}
		}

		return value;
	}

	private void push(int numstate, ArrayList listNode) throws ParserException,
			LexerException, IOException
	{
		this.nodeList = listNode;

		if (!stack.hasNext())
		{
			stack.add(new State(numstate, this.nodeList));
			return;
		}

		State s = (State) stack.next();
		s.state = numstate;
		s.nodes = this.nodeList;
	}

	private int state()
	{
		State s = (State) stack.previous();
		stack.next();
		return s.state;
	}

	private ArrayList pop()
	{
		return (ArrayList) ((State) stack.previous()).nodes;
	}

	private int index(Switchable token)
	{
		converter.index = -1;
		token.apply(converter);
		return converter.index;
	}

	public Start parse() throws ParserException, LexerException, IOException
	{
		push(0, null);

		List ign = null;
		while (true)
		{
			while (index(lexer.peek()) == -1)
			{
				if (ign == null)
				{
					ign = new TypedLinkedList(NodeCast.instance);
				}

				ign.add(lexer.next());
			}

			if (ign != null)
			{
				ignoredTokens.setIn(lexer.peek(), ign);
				ign = null;
			}

			last_pos = lexer.peek().getPos();
			last_line = lexer.peek().getLine();
			last_token = lexer.peek();

			int index = index(lexer.peek());
			action[0] = actionTable[state()][0][1];
			action[1] = actionTable[state()][0][2];

			int low = 1;
			int high = actionTable[state()].length - 1;

			while (low <= high)
			{
				int middle = (low + high) / 2;

				if (index < actionTable[state()][middle][0])
				{
					high = middle - 1;
				}
				else if (index > actionTable[state()][middle][0])
				{
					low = middle + 1;
				}
				else
				{
					action[0] = actionTable[state()][middle][1];
					action[1] = actionTable[state()][middle][2];
					break;
				}
			}

			switch (action[0])
			{
				case SHIFT:
				{
					ArrayList list = new ArrayList();
					list.add(lexer.next());
					push(action[1], list);
					last_shift = action[1];
				}
					break;
				case REDUCE:
					switch (action[1])
					{

						case 0:
						{
							ArrayList list = new0();
							push(goTo(0), list);
						}
							break;

						case 1:
						{
							ArrayList list = new1();
							push(goTo(0), list);
						}
							break;

						case 2:
						{
							ArrayList list = new2();
							push(goTo(0), list);
						}
							break;

						case 3:
						{
							ArrayList list = new3();
							push(goTo(0), list);
						}
							break;

						case 4:
						{
							ArrayList list = new4();
							push(goTo(0), list);
						}
							break;

						case 5:
						{
							ArrayList list = new5();
							push(goTo(0), list);
						}
							break;

						case 6:
						{
							ArrayList list = new6();
							push(goTo(1), list);
						}
							break;

						case 7:
						{
							ArrayList list = new7();
							push(goTo(1), list);
						}
							break;

						case 8:
						{
							ArrayList list = new8();
							push(goTo(1), list);
						}
							break;

						case 9:
						{
							ArrayList list = new9();
							push(goTo(1), list);
						}
							break;

						case 10:
						{
							ArrayList list = new10();
							push(goTo(1), list);
						}
							break;

						case 11:
						{
							ArrayList list = new11();
							push(goTo(2), list);
						}
							break;

						case 12:
						{
							ArrayList list = new12();
							push(goTo(3), list);
						}
							break;

						case 13:
						{
							ArrayList list = new13();
							push(goTo(4), list);
						}
							break;

						case 14:
						{
							ArrayList list = new14();
							push(goTo(4), list);
						}
							break;

						case 15:
						{
							ArrayList list = new15();
							push(goTo(4), list);
						}
							break;

						case 16:
						{
							ArrayList list = new16();
							push(goTo(4), list);
						}
							break;

						case 17:
						{
							ArrayList list = new17();
							push(goTo(5), list);
						}
							break;

						case 18:
						{
							ArrayList list = new18();
							push(goTo(6), list);
						}
							break;

						case 19:
						{
							ArrayList list = new19();
							push(goTo(7), list);
						}
							break;

						case 20:
						{
							ArrayList list = new20();
							push(goTo(8), list);
						}
							break;

						case 21:
						{
							ArrayList list = new21();
							push(goTo(8), list);
						}
							break;

						case 22:
						{
							ArrayList list = new22();
							push(goTo(9), list);
						}
							break;

						case 23:
						{
							ArrayList list = new23();
							push(goTo(9), list);
						}
							break;

						case 24:
						{
							ArrayList list = new24();
							push(goTo(10), list);
						}
							break;

						case 25:
						{
							ArrayList list = new25();
							push(goTo(11), list);
						}
							break;

						case 26:
						{
							ArrayList list = new26();
							push(goTo(11), list);
						}
							break;

						case 27:
						{
							ArrayList list = new27();
							push(goTo(12), list);
						}
							break;

						case 28:
						{
							ArrayList list = new28();
							push(goTo(12), list);
						}
							break;

					}
					break;
				case ACCEPT:
				{
					EOF node2 = (EOF) lexer.next();
					PPath node1 = (PPath) ((ArrayList) pop()).get(0);
					Start node = new Start(node1, node2);
					return node;
				}
				case ERROR:
					throw new ParserException(last_token, "["
							+ last_line + "," + last_pos + "] "
							+ errorMessages[errors[action[1]]]);
			}
		}
	}

	ArrayList new0()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			Object nullNode3 = null;
			Object nullNode4 = null;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);

			ppathNode1 = new AGroupPath(pstructgroupNode2, null, null);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new1()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			PParamGroup pparamgroupNode3;
			Object nullNode4 = null;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);
			pparamgroupNode3 = (PParamGroup) nodeArrayList2.get(0);

			ppathNode1 = new AGroupPath(pstructgroupNode2, pparamgroupNode3, null);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new2()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			Object nullNode3 = null;
			POptions poptionsNode4;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);
			poptionsNode4 = (POptions) nodeArrayList2.get(0);

			ppathNode1 = new AGroupPath(pstructgroupNode2, null, poptionsNode4);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new3()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			PParamGroup pparamgroupNode3;
			POptions poptionsNode4;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);
			pparamgroupNode3 = (PParamGroup) nodeArrayList2.get(0);
			poptionsNode4 = (POptions) nodeArrayList3.get(0);

			ppathNode1 = new AGroupPath(pstructgroupNode2, pparamgroupNode3,
					poptionsNode4);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new4()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			PParamGroup pparamgroupNode3;
			PParam pparamNode4;
			Object nullNode5 = null;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);
			pparamgroupNode3 = (PParamGroup) nodeArrayList2.get(0);
			pparamNode4 = (PParam) nodeArrayList3.get(0);

			ppathNode1 = new AParamPath(pstructgroupNode2, pparamgroupNode3, pparamNode4,
					null);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new5()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList4 = (ArrayList) pop();
		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PPath ppathNode1;
		{
			PStructGroup pstructgroupNode2;
			PParamGroup pparamgroupNode3;
			PParam pparamNode4;
			POptions poptionsNode5;
			pstructgroupNode2 = (PStructGroup) nodeArrayList1.get(0);
			pparamgroupNode3 = (PParamGroup) nodeArrayList2.get(0);
			pparamNode4 = (PParam) nodeArrayList3.get(0);
			poptionsNode5 = (POptions) nodeArrayList4.get(0);

			ppathNode1 = new AParamPath(pstructgroupNode2, pparamgroupNode3, pparamNode4,
					poptionsNode5);
		}
		nodeList.add(ppathNode1);
		return nodeList;
	}

	ArrayList new6()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroup pstructgroupNode1;
		{
			TSlash tslashNode2;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);

			pstructgroupNode1 = new ARootStructGroup(tslashNode2);
		}
		nodeList.add(pstructgroupNode1);
		return nodeList;
	}

	ArrayList new7()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroup pstructgroupNode1;
		{
			Object nullNode2 = null;
			TId tidNode3;
			TypedLinkedList listNode4 = new TypedLinkedList();
			tidNode3 = (TId) nodeArrayList1.get(0);
			{
			}

			pstructgroupNode1 = new AStructGroup(null, tidNode3, listNode4);
		}
		nodeList.add(pstructgroupNode1);
		return nodeList;
	}

	ArrayList new8()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroup pstructgroupNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			TypedLinkedList listNode4 = new TypedLinkedList();
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);
			{
			}

			pstructgroupNode1 = new AStructGroup(tslashNode2, tidNode3, listNode4);
		}
		nodeList.add(pstructgroupNode1);
		return nodeList;
	}

	ArrayList new9()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroup pstructgroupNode1;
		{
			Object nullNode2 = null;
			TId tidNode3;
			TypedLinkedList listNode5 = new TypedLinkedList();
			tidNode3 = (TId) nodeArrayList1.get(0);
			{
				TypedLinkedList listNode4 = new TypedLinkedList();
				listNode4 = (TypedLinkedList) nodeArrayList2.get(0);
				if (listNode4 != null)
				{
					listNode5.addAll(listNode4);
				}
			}

			pstructgroupNode1 = new AStructGroup(null, tidNode3, listNode5);
		}
		nodeList.add(pstructgroupNode1);
		return nodeList;
	}

	ArrayList new10()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroup pstructgroupNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			TypedLinkedList listNode5 = new TypedLinkedList();
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);
			{
				TypedLinkedList listNode4 = new TypedLinkedList();
				listNode4 = (TypedLinkedList) nodeArrayList3.get(0);
				if (listNode4 != null)
				{
					listNode5.addAll(listNode4);
				}
			}

			pstructgroupNode1 = new AStructGroup(tslashNode2, tidNode3, listNode5);
		}
		nodeList.add(pstructgroupNode1);
		return nodeList;
	}

	ArrayList new11()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PStructGroupTail pstructgrouptailNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pstructgrouptailNode1 = new AStructGroupTail(tslashNode2, tidNode3);
		}
		nodeList.add(pstructgrouptailNode1);
		return nodeList;
	}

	ArrayList new12()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PParamGroup pparamgroupNode1;
		{
			TColon tcolonNode2;
			TId tidNode3;
			tcolonNode2 = (TColon) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pparamgroupNode1 = new AParamGroup(tcolonNode2, tidNode3);
		}
		nodeList.add(pparamgroupNode1);
		return nodeList;
	}

	ArrayList new13()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PParam pparamNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			Object nullNode4 = null;
			Object nullNode5 = null;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pparamNode1 = new AParam(tslashNode2, tidNode3, null, null);
		}
		nodeList.add(pparamNode1);
		return nodeList;
	}

	ArrayList new14()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PParam pparamNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			PArraySelect parrayselectNode4;
			Object nullNode5 = null;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);
			parrayselectNode4 = (PArraySelect) nodeArrayList3.get(0);

			pparamNode1 = new AParam(tslashNode2, tidNode3, parrayselectNode4, null);
		}
		nodeList.add(pparamNode1);
		return nodeList;
	}

	ArrayList new15()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PParam pparamNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			Object nullNode4 = null;
			PAttribute pattributeNode5;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);
			pattributeNode5 = (PAttribute) nodeArrayList3.get(0);

			pparamNode1 = new AParam(tslashNode2, tidNode3, null, pattributeNode5);
		}
		nodeList.add(pparamNode1);
		return nodeList;
	}

	ArrayList new16()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList4 = (ArrayList) pop();
		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PParam pparamNode1;
		{
			TSlash tslashNode2;
			TId tidNode3;
			PArraySelect parrayselectNode4;
			PAttribute pattributeNode5;
			tslashNode2 = (TSlash) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);
			parrayselectNode4 = (PArraySelect) nodeArrayList3.get(0);
			pattributeNode5 = (PAttribute) nodeArrayList4.get(0);

			pparamNode1 = new AParam(tslashNode2, tidNode3, parrayselectNode4,
					pattributeNode5);
		}
		nodeList.add(pparamNode1);
		return nodeList;
	}

	ArrayList new17()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList5 = (ArrayList) pop();
		ArrayList nodeArrayList4 = (ArrayList) pop();
		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PArraySelect parrayselectNode1;
		{
			TLBracket tlbracketNode2;
			TQuote tquoteNode3;
			TId tidNode4;
			TQuote tquoteNode5;
			TRBracket trbracketNode6;
			tlbracketNode2 = (TLBracket) nodeArrayList1.get(0);
			tquoteNode3 = (TQuote) nodeArrayList2.get(0);
			tidNode4 = (TId) nodeArrayList3.get(0);
			tquoteNode5 = (TQuote) nodeArrayList4.get(0);
			trbracketNode6 = (TRBracket) nodeArrayList5.get(0);

			parrayselectNode1 = new AArraySelect(tlbracketNode2, tquoteNode3, tidNode4,
					tquoteNode5, trbracketNode6);
		}
		nodeList.add(parrayselectNode1);
		return nodeList;
	}

	ArrayList new18()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		PAttribute pattributeNode1;
		{
			TAt tatNode2;
			TId tidNode3;
			tatNode2 = (TAt) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pattributeNode1 = new AAttribute(tatNode2, tidNode3);
		}
		nodeList.add(pattributeNode1);
		return nodeList;
	}

	ArrayList new19()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptions poptionsNode1;
		{
			TLBrace tlbraceNode2;
			POptionsBlock poptionsblockNode3;
			TRBrace trbraceNode4;
			tlbraceNode2 = (TLBrace) nodeArrayList1.get(0);
			poptionsblockNode3 = (POptionsBlock) nodeArrayList2.get(0);
			trbraceNode4 = (TRBrace) nodeArrayList3.get(0);

			poptionsNode1 = new AOptions(tlbraceNode2, poptionsblockNode3, trbraceNode4);
		}
		nodeList.add(poptionsNode1);
		return nodeList;
	}

	ArrayList new20()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptionsBlock poptionsblockNode1;
		{
			POptionsPart poptionspartNode2;
			TypedLinkedList listNode3 = new TypedLinkedList();
			poptionspartNode2 = (POptionsPart) nodeArrayList1.get(0);
			{
			}

			poptionsblockNode1 = new AOptionsBlock(poptionspartNode2, listNode3);
		}
		nodeList.add(poptionsblockNode1);
		return nodeList;
	}

	ArrayList new21()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptionsBlock poptionsblockNode1;
		{
			POptionsPart poptionspartNode2;
			TypedLinkedList listNode4 = new TypedLinkedList();
			poptionspartNode2 = (POptionsPart) nodeArrayList1.get(0);
			{
				TypedLinkedList listNode3 = new TypedLinkedList();
				listNode3 = (TypedLinkedList) nodeArrayList2.get(0);
				if (listNode3 != null)
				{
					listNode4.addAll(listNode3);
				}
			}

			poptionsblockNode1 = new AOptionsBlock(poptionspartNode2, listNode4);
		}
		nodeList.add(poptionsblockNode1);
		return nodeList;
	}

	ArrayList new22()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptionsPartTail poptionsparttailNode1;
		{
			TAnd tandNode2;
			POptionsPart poptionspartNode3;
			tandNode2 = (TAnd) nodeArrayList1.get(0);
			poptionspartNode3 = (POptionsPart) nodeArrayList2.get(0);

			poptionsparttailNode1 = new AAndOptionsPartTail(tandNode2, poptionspartNode3);
		}
		nodeList.add(poptionsparttailNode1);
		return nodeList;
	}

	ArrayList new23()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptionsPartTail poptionsparttailNode1;
		{
			TOr torNode2;
			POptionsPart poptionspartNode3;
			torNode2 = (TOr) nodeArrayList1.get(0);
			poptionspartNode3 = (POptionsPart) nodeArrayList2.get(0);

			poptionsparttailNode1 = new AOrOptionsPartTail(torNode2, poptionspartNode3);
		}
		nodeList.add(poptionsparttailNode1);
		return nodeList;
	}

	ArrayList new24()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList5 = (ArrayList) pop();
		ArrayList nodeArrayList4 = (ArrayList) pop();
		ArrayList nodeArrayList3 = (ArrayList) pop();
		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		POptionsPart poptionspartNode1;
		{
			TId tidNode2;
			TEq teqNode3;
			TQuote tquoteNode4;
			TId tidNode5;
			TQuote tquoteNode6;
			tidNode2 = (TId) nodeArrayList1.get(0);
			teqNode3 = (TEq) nodeArrayList2.get(0);
			tquoteNode4 = (TQuote) nodeArrayList3.get(0);
			tidNode5 = (TId) nodeArrayList4.get(0);
			tquoteNode6 = (TQuote) nodeArrayList5.get(0);

			poptionspartNode1 = new AOptionsPart(tidNode2, teqNode3, tquoteNode4,
					tidNode5, tquoteNode6);
		}
		nodeList.add(poptionspartNode1);
		return nodeList;
	}

	ArrayList new25()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		TypedLinkedList listNode2 = new TypedLinkedList();
		{
			PStructGroupTail pstructgrouptailNode1;
			pstructgrouptailNode1 = (PStructGroupTail) nodeArrayList1.get(0);
			if (pstructgrouptailNode1 != null)
			{
				listNode2.add(pstructgrouptailNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	ArrayList new26()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		TypedLinkedList listNode3 = new TypedLinkedList();
		{
			TypedLinkedList listNode1 = new TypedLinkedList();
			PStructGroupTail pstructgrouptailNode2;
			listNode1 = (TypedLinkedList) nodeArrayList1.get(0);
			pstructgrouptailNode2 = (PStructGroupTail) nodeArrayList2.get(0);
			if (listNode1 != null)
			{
				listNode3.addAll(listNode1);
			}
			if (pstructgrouptailNode2 != null)
			{
				listNode3.add(pstructgrouptailNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	ArrayList new27()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList1 = (ArrayList) pop();
		TypedLinkedList listNode2 = new TypedLinkedList();
		{
			POptionsPartTail poptionsparttailNode1;
			poptionsparttailNode1 = (POptionsPartTail) nodeArrayList1.get(0);
			if (poptionsparttailNode1 != null)
			{
				listNode2.add(poptionsparttailNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	ArrayList new28()
	{
		ArrayList nodeList = new ArrayList();

		ArrayList nodeArrayList2 = (ArrayList) pop();
		ArrayList nodeArrayList1 = (ArrayList) pop();
		TypedLinkedList listNode3 = new TypedLinkedList();
		{
			TypedLinkedList listNode1 = new TypedLinkedList();
			POptionsPartTail poptionsparttailNode2;
			listNode1 = (TypedLinkedList) nodeArrayList1.get(0);
			poptionsparttailNode2 = (POptionsPartTail) nodeArrayList2.get(0);
			if (listNode1 != null)
			{
				listNode3.addAll(listNode1);
			}
			if (poptionsparttailNode2 != null)
			{
				listNode3.add(poptionsparttailNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	private static int[][][] actionTable;

	/*
	 * { {{-1, ERROR, 0}, {6, SHIFT, 1}, {9, SHIFT, 2}, }, {{-1, REDUCE, 6}, {9, SHIFT,
	 * 5}, }, {{-1, REDUCE, 7}, {6, SHIFT, 6}, }, {{-1, ERROR, 3}, {12, ACCEPT, -1}, },
	 * {{-1, REDUCE, 0}, {4, SHIFT, 9}, {8, SHIFT, 10}, }, {{-1, REDUCE, 8}, {6, SHIFT,
	 * 6}, }, {{-1, ERROR, 6}, {9, SHIFT, 14}, }, {{-1, REDUCE, 25}, }, {{-1, REDUCE, 9},
	 * {6, SHIFT, 6}, }, {{-1, ERROR, 9}, {9, SHIFT, 16}, }, {{-1, ERROR, 10}, {9, SHIFT,
	 * 19}, }, {{-1, REDUCE, 1}, {4, SHIFT, 9}, {6, SHIFT, 20}, }, {{-1, REDUCE, 2}, },
	 * {{-1, REDUCE, 10}, {6, SHIFT, 6}, }, {{-1, REDUCE, 11}, }, {{-1, REDUCE, 26}, },
	 * {{-1, ERROR, 16}, {10, SHIFT, 23}, }, {{-1, ERROR, 17}, {5, SHIFT, 24}, }, {{-1,
	 * REDUCE, 20}, {0, SHIFT, 25}, {1, SHIFT, 26}, }, {{-1, REDUCE, 12}, }, {{-1, ERROR,
	 * 20}, {9, SHIFT, 29}, }, {{-1, REDUCE, 4}, {4, SHIFT, 9}, }, {{-1, REDUCE, 3}, },
	 * {{-1, ERROR, 23}, {11, SHIFT, 31}, }, {{-1, REDUCE, 19}, }, {{-1, ERROR, 25}, {9,
	 * SHIFT, 16}, }, {{-1, ERROR, 26}, {9, SHIFT, 16}, }, {{-1, REDUCE, 27}, }, {{-1,
	 * REDUCE, 21}, {0, SHIFT, 25}, {1, SHIFT, 26}, }, {{-1, REDUCE, 13}, {2, SHIFT, 35},
	 * {7, SHIFT, 36}, }, {{-1, REDUCE, 5}, }, {{-1, ERROR, 31}, {9, SHIFT, 39}, }, {{-1,
	 * REDUCE, 22}, }, {{-1, REDUCE, 23}, }, {{-1, REDUCE, 28}, }, {{-1, ERROR, 35}, {11,
	 * SHIFT, 40}, }, {{-1, ERROR, 36}, {9, SHIFT, 41}, }, {{-1, REDUCE, 14}, {7, SHIFT,
	 * 36}, }, {{-1, REDUCE, 15}, }, {{-1, ERROR, 39}, {11, SHIFT, 43}, }, {{-1, ERROR,
	 * 40}, {9, SHIFT, 44}, }, {{-1, REDUCE, 18}, }, {{-1, REDUCE, 16}, }, {{-1, REDUCE,
	 * 24}, }, {{-1, ERROR, 44}, {11, SHIFT, 45}, }, {{-1, ERROR, 45}, {3, SHIFT, 46}, },
	 * {{-1, REDUCE, 17}, }, };
	 */
	private static int[][][] gotoTable;

	/*
	 * { {{-1, 3}, }, {{-1, 4}, }, {{-1, 7}, {8, 15}, {13, 15}, }, {{-1, 11}, }, {{-1,
	 * 21}, }, {{-1, 37}, }, {{-1, 38}, {37, 42}, }, {{-1, 12}, {11, 22}, {21, 30}, },
	 * {{-1, 17}, }, {{-1, 27}, {28, 34}, }, {{-1, 18}, {25, 32}, {26, 33}, }, {{-1, 8},
	 * {5, 13}, }, {{-1, 28}, }, };
	 */
	private static String[] errorMessages;

	/*
	 * { "expecting: '/', id", "expecting: l brace, colon, id, EOF", "expecting: l brace,
	 * '/', colon, EOF", "expecting: EOF", "expecting: l brace, colon, EOF", "expecting:
	 * id", "expecting: l brace, '/', EOF", "expecting: eq", "expecting: r brace",
	 * "expecting: 'and', 'or', r brace", "expecting: l brace, EOF", "expecting: '''",
	 * "expecting: l bracket, l brace, at, EOF", "expecting: l brace, at, EOF",
	 * "expecting: r bracket", };
	 */
	private static int[] errors;
	/*
	 * { 0, 1, 2, 3, 4, 2, 5, 2, 2, 5, 5, 6, 3, 2, 2, 2, 7, 8, 9, 6, 5, 10, 3, 11, 3, 5,
	 * 5, 9, 9, 12, 3, 5, 9, 9, 9, 11, 5, 13, 10, 11, 5, 10, 10, 9, 11, 14, 13, };
	 */
}