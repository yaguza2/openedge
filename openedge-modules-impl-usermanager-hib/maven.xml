<project
  default="build" 
  xmlns:j="jelly:core"
  xmlns:ant="jelly:ant"
  xmlns:license="license"
  xmlns:maven="jelly:maven"
  xmlns:deploy="deploy"
  xmlns:resources="resources"
  xmlns:util="jelly:util"
  xmlns:doc="doc"
  xmlns:m="maven">

  <!-- xmlns:velocity="jelly:org.apache.commons.jelly.tags.velocity.VelocityTagLibrary" -->

  <goal name="eclipse:reactor">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      postProcessing="true"
      goals=""
      banner="Building"
      ignoreFailures="false"/>
    
	<attainGoal name="eclipse:generate-project"/>
	
    <ant:echo>Creating ${basedir}/.classpath ...</ant:echo>
    <j:set var="outputDir" value="${maven.eclipse.output.dir}"/>
    <j:if test="${empty outputDir}">
      <j:set var="outputDir" value="target/classes"/>
    </j:if>   
    <j:file name="${basedir}/.classpath" prettyPrint="true" xmlns="dummy">
      
      <classpath>
      
      	<ant:echo>path: ${basedir}</ant:echo>
      	<ant:echo></ant:echo>
      
      	  <j:set var="unitWasAdded" value="false"/>
	      <j:forEach var="reactorProject" items="${reactorProjects}">

			  <ant:echo>
				project: ${reactorProject.build.distributionDirectory}
					src: ${reactorProject.build.sourceDirectory}
		    		tst: ${reactorProject.build.unitTestSourceDirectory}
			  </ant:echo>
		      <j:if test="${reactorProject.build.sourceDirectory != ''}">
		        <classpathentry kind="src" path="${reactorProject.build.sourceDirectory}"/>
		      </j:if>
		      <!-- <j:if test="!${unitWasAdded}"> -->
			      <j:if test="${reactorProject.build.unitTestSourceDirectory != ''}">
			        
			        <classpathentry kind="src" path="${reactorProject.build.unitTestSourceDirectory}"/>
			        <!-- Here are the rules:
			             If the project has maven.eclipse.junit property, add that ver of junit
			             If the project has maven.eclipse.junit property and it is empty, don't add junit
			             If the project has junit dep, use that.
			             Use the test plugin version
			          -->
			        <j:set var="verX" value="${maven.eclipse.junit}X"/>
			        <j:set var="depVersion">${pom.getPluginContext('maven-test-plugin').getVariable('plugin').getDependency('junit').getVersion()}</j:set>
			        <j:if test="${reactorProject.getDependency('junit') != null}">
			          <j:set var="depVersion" value="${pom.getDependency('junit').getVersion()}"/>
			        </j:if>
			        <j:if test="${verX != 'X'}">
			          <j:set var="depVersion">${maven.eclipse.junit}</j:set>
			        </j:if>
			        <j:if test="${verX == 'noneX'}">
			          <j:set var="depVersion" value="none"/>  
			        </j:if>
			        <j:if test="${depVersion != 'none'}">
			          <classpathentry kind="var" path="MAVEN_REPO/junit/jars/junit-${depVersion}.jar"/>
			        </j:if>
			      	<j:set var="${unitWasAdded}" value="true"/>
			      </j:if>
			   <!-- </j:if> --> 
		      
		  </j:forEach>
	      
	      <classpathentry kind="var" path="JRE_LIB" rootpath="JRE_SRCROOT" sourcepath="JRE_SRC"/>
	        <j:forEach var="lib" items="${pom.artifacts}">
	          <j:set var="eclipseDependency"
	                 value="${lib.dependency.getProperty('eclipse.dependency')}"/>
	          <j:choose>
	            <j:when test="${eclipseDependency == 'true'}">
	              <classpathentry kind="src" path="/${lib.dependency.artifactId}"/>
	            </j:when>
	            <j:when test="${lib.dependency.groupId == 'junit'}">
	            	<!-- ignoring junit dependency as we've already created it -->
	            </j:when>
	            <j:otherwise>
	              <classpathentry kind="var" path="MAVEN_REPO${lib.urlPath}"/>
	            </j:otherwise>
	          </j:choose>
	        </j:forEach>
	      <!-- add the unit test build directory so that any files generated via Maven are available -->  
	      <classpathentry kind="lib" path="target/test-classes"/>
	      <classpathentry kind="output" path="${outputDir}"/>
    	</classpath>
    	
  	</j:file>
  </goal>

  <goal name="build">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="clean,jar:fsdeploy"
      banner="Building"
      ignoreFailures="false"/>

  </goal>
  
  <goal name="build-snapshot">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="clean,jar:fsdeploy-snapshot"
      banner="Building"
      ignoreFailures="false"
    />

  </goal>
  
  <goal name="install-snapshot">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="clean,jar:install-snapshot"
      banner="Building"
      ignoreFailures="false"
    />

  </goal>


  <goal name="site-all">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="site:generate"
      banner="Building"
      ignoreFailures="false"
    />
   </goal>


  <goal name="site-deploy-all">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="site:deploy"
      banner="Building"
      ignoreFailures="false"
    />
   </goal>

  <goal name="deploy-poms">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="pom:deploy"
      banner="Building"
      ignoreFailures="false"
    />
  </goal>

  <goal name="install-poms">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="pom:install"
      banner="Building"
      ignoreFailures="false"
    />
  </goal>

  <goal name="deploy-components">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="jar:deploy"
      banner="Building"
      ignoreFailures="false"
    />
  </goal>
  
  <!-- <goal name="component-manifest">
    
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      banner="Building"
      ignoreFailures="false"
      postProcessing="true"
    />

    <velocity:merge 
      name="${plexus.component.manifest}"
      basedir="${basedir}"
      template="component-manifest.vm"
    />

  </goal>

  <goal name="deploy-component-manifest" prereqs="component-manifest">

    <deploy:artifact
      artifact="${plexus.component.manifest}"
      assureDirectoryCommand="mkdir -p"
    />
    
  </goal> -->
  
  <goal name="jar:fsdeploy" prereqs="jar:jar"
    description="Install the jar in the remote repository">
    
    <ant:echo>
    id = '${pom.artifactId}'
    groupId = '${pom.groupId}'
    artifactDirectory = '${pom.artifactDirectory}'
    </ant:echo>
    
    <ant:property name="jardir__" value="${maven.repo.central.fileserver}/${pom.artifactDirectory}/jars"/>
    <ant:mkdir dir="${jardir__}"/>    
    <ant:copy 
      file="${maven.build.dir}/${maven.final.name}.jar"
      todir="${jardir__}"
      overwrite="true"
    />
  </goal>
  
</project>
